<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matteo Mortari, Software Engineer</title>
    <link>https://matteomortari.com</link>
    <atom:link href="https://matteomortari.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>I believe there is a whole new range of unexplored applications for Rule Engines (AI/Expert Systems) and Machine Learning; I also believe defining the Business Rules on the BRMS system not only enables knowledge inference from raw data, but most importantly when modeled using the DMN open standard, it helps to shorten the distance between experts and analysts, between developers and end-users, business stakeholders.</description>
    <language>en-gb</language>
    <pubDate>Tue, 12 Dec 2023 13:44:43 +0000</pubDate>
    <lastBuildDate>Tue, 12 Dec 2023 13:44:43 +0000</lastBuildDate>

    <item>
      <title>Model Registry tech demo 20231121</title>
      <link>https://matteomortari.com/blog/2023/model-registry-tech-demo-20231121.html</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/model-registry-tech-demo-20231121.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/grXnjGtDFXg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Technology_demonstration&quot;&gt;technical demo&lt;/a&gt; from the &lt;a href=&quot;https://github.com/opendatahub-io/model-registry&quot;&gt;Model Registry&lt;/a&gt; team of &lt;a href=&quot;https://opendatahub.io&quot;&gt;Open Data Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Content:&lt;br /&gt;
- model-registry-operator&lt;br /&gt;
- Notebook → Model Registry&lt;br /&gt;
- DS Pipeline → Model Registry&lt;br /&gt;
- Model Registry → Serving&lt;br /&gt;
- One More Thing...&lt;br /&gt;
- Conclusions&lt;/p&gt;
&lt;p&gt;This post does not go into details of context and background of the Model Registry, for which we invite you to checkout &lt;a href=&quot;https://docs.google.com/document/d/1T3KfOqIfJohp0s1koQ2XrJJQQhj7TECO-m2xPsW59_c/edit?usp=sharing&quot;&gt;this document&lt;/a&gt; instead.&lt;/p&gt;
&lt;h2&gt;model-registry-operator&lt;/h2&gt;
&lt;p&gt;We can use the &lt;a href=&quot;https://github.com/opendatahub-io/model-registry-operator&quot;&gt;Model Registry Operator&lt;/a&gt; to install the Model Registry in our Kubernetes platform.&lt;br /&gt;
Installing the operator is easy, following a few steps as detailed in the README.&lt;/p&gt;
&lt;p&gt;First, we install a Custom Resource Definition for our Model Registry:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2020.54.21%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then, we deploy the &lt;code&gt;model-registry-operator&lt;/code&gt; which at present sits in its own namespace:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2020.58.10%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we create a Model Registry instance:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.01.57%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;With an instance of Model Registry now available, we can move to perform some ML training using Notebook in order to later index the resulting models on this model registry instance.&lt;/p&gt;
&lt;h2&gt;Notebook → Model Registry&lt;/h2&gt;
&lt;p&gt;For the scope of this technical demo of Model Registry, we will be training and making inference with the &lt;a href=&quot;https://en.wikipedia.org/wiki/MNIST_database&quot;&gt;MNIST dataset&lt;/a&gt;, serving as an &amp;quot;hello world&amp;quot; style of example for neural network usages.&lt;/p&gt;
&lt;p&gt;We are given some training data set to perform training: given the following image, the training label is defined as &apos;3&apos;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.14.11%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So, given the following image from the test data set, we would like our ML model (once trained) to successfully predict the label &apos;4&apos;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.15.26%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Notebook → Model Registry: First model version&lt;/h3&gt;
&lt;p&gt;We can start training a first version of our neural network:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.17.03%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And after some quick dry-run to check the prediction seems reasonable:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.17.32%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can store the trained ML model in an S3-compatible bucket:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.19.46%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And index the model in our Model Registry:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.19.53%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Notebook → Model Registry: Second model version&lt;/h3&gt;
&lt;p&gt;For the scope of this technical demo, we can now train a second version of our ML model, by defining instead a convolutional neural network:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.22.50%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can perform again some quick dry-run to check the prediction seems reasonable, store the trained model in the S3 bucket, and index the model in the Model Registry:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.24.43%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can notice in the outputs the entities created on the Model Registry.&lt;/p&gt;
&lt;h3&gt;Notebook → Model Registry: REST APIs&lt;/h3&gt;
&lt;p&gt;We don&apos;t have yet a GUI web application to display the metadata in our Model Registry, but we can perform this exercise by making use of the REST APIs from the command line.&lt;/p&gt;
&lt;p&gt;We can display the known RegisteredModel, in this case we called our RegisteredModel &lt;code&gt;MNIST&lt;/code&gt; (as we&apos;ve been using the MNIST dataset):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MR_HOSTNAME=...

curl --silent -X &apos;GET&apos; \
  &amp;quot;$MR_HOSTNAME/api/model_registry/v1alpha1/registered_models?pageSize=100&amp;amp;orderBy=ID&amp;amp;sortOrder=DESC&amp;amp;nextPageToken=&amp;quot; \
  -H &apos;accept: application/json&apos; | jq .items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.29.58%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can display the two versions we have just indexed, which are referencing as well the models as Stored in S3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --silent -X &apos;GET&apos; \
  &amp;quot;$MR_HOSTNAME/api/model_registry/v1alpha1/model_versions?pageSize=100&amp;amp;orderBy=ID&amp;amp;sortOrder=DESC&amp;amp;nextPageToken=&amp;quot; \
  -H &apos;accept: application/json&apos; | jq .items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.32.42%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And we can display details for the ModelArtifact corresponding to the latter version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --silent -X &apos;GET&apos; \
  &amp;quot;$MR_HOSTNAME/api/model_registry/v1alpha1/model_versions/4/artifacts&amp;quot; \
  -H &apos;accept: application/json&apos; | jq .items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.33.59%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can move now to Data Science Pipeline.&lt;/p&gt;
&lt;h2&gt;DS Pipeline → Model Registry&lt;/h2&gt;
&lt;p&gt;We can create a Data Science Pipeline (DSP) which performs analogous steps in training, validating, storing and indexing the ML model:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.40.37%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can create a DSP Run, possibly using specific parameters which influence the model training and validation; since the trained model matches the requirements defined in the pipeline, this run successfully completed, the model is stored once again on a S3-compatible bucket and the metadata are indexed on the Model Registry. We have now 3 versions of our ML model:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2021.52.50%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We have now a bunch of of ModelVersion(s) available on the Model Registry, ready to be deployed for inference using Model Serving.&lt;/p&gt;
&lt;h2&gt;Model Registry → Serving&lt;/h2&gt;
&lt;p&gt;We can use the following REST API to create an entity for InferenceService on the Model Registry:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X &apos;POST&apos; \
  $MR_HOSTNAME&apos;/api/model_registry/v1alpha1/serving_environments/1/inference_services&apos; \
  -H &apos;accept: application/json&apos; \
  -H &apos;Content-Type: application/json&apos; \
  -d &apos;{
  &amp;quot;name&amp;quot;: &amp;quot;mnist-e2e&amp;quot;,
  &amp;quot;modelVersionId&amp;quot;: &amp;quot;4&amp;quot;,
  &amp;quot;runtime&amp;quot;: &amp;quot;mmserver1&amp;quot;,
  &amp;quot;registeredModelId&amp;quot;: &amp;quot;2&amp;quot;,
  &amp;quot;servingEnvironmentId&amp;quot;: &amp;quot;1&amp;quot;,
  &amp;quot;state&amp;quot;: &amp;quot;DEPLOYED&amp;quot;
}&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2022.05.03%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It&apos;s important to note the Model Registry is &lt;em&gt;not&lt;/em&gt; an active orchestrator; what actually happens behind the scene is that the K8s Model Controller performs a reconciliation loop and based on the metadata we just created on the Model Registry, create a CR for ModelMesh in order to deploy our ML for Inference:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2022.09.01%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can as well undeploy the InferenceService by changing flipping the status on the Model Registry; in this case the same reconcilation loop will trigger again, but will proceed accordingly to remove the ModelMesh CR for Serving:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X &apos;PATCH&apos; \
  &amp;quot;$MR_HOSTNAME/api/model_registry/v1alpha1/inference_services/6&amp;quot; \
  -H &apos;accept: application/json&apos; \
  -H &apos;Content-Type: application/json&apos; \
  -d &apos;{
  &amp;quot;modelVersionId&amp;quot;: &amp;quot;4&amp;quot;,
  &amp;quot;runtime&amp;quot;: &amp;quot;mmserver1&amp;quot;,
  &amp;quot;state&amp;quot;: &amp;quot;UNDEPLOYED&amp;quot;
}&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2022.13.00%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;One More Thing...&lt;/h2&gt;
&lt;p&gt;To wrap-up this technical exercise, we can re-deploy once more our trained ML model and noting the inference service endpoint:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2022.16.26%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As we can use it to deploy some Intelligent Application on Kubernetes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2022.21.41%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Which in this case is a (very raw cut!) PoC application exercising our ML inference endpoint on ModelMesh for Model Serving; as we draw by hand:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;model-registry-tech-demo-20231121/Screenshot%202023-12-02%20at%2022.23.00%20(2).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We will get back an array of probabilities; since index 2 is the most probable, our intelligent application is predicting we have drawn the &lt;code&gt;number: 2&lt;/code&gt; thanks to the model we just trained, indexed and deployed, all while making use of Model Registry!&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;In this short technical demo we have explored some of the capabilites of the Model Registry by making an end-to-end demo.&lt;/p&gt;
&lt;p&gt;We have installed the model-registry-operator in order to deploy our instance of Model Registry.&lt;/p&gt;
&lt;p&gt;We have performed a couple of training of ML neural networks, stored them in an S3 bucket and indexed those model in the Model Registry. We have also performed analogously from the perspective of Data Science Pipelines, which may include parametrization, model validation, etc.&lt;/p&gt;
&lt;p&gt;We have seen how Model Registry is &lt;em&gt;not&lt;/em&gt; an active orchestrator but a metadata repository; following established Kubernetes best-practices a reconciliation loop from the Model Controller make sure to enact the correct CustomResource deployment and update in the cluster. This mechanism is used to govern deployment of ML models which the Model Registry have previously maintained index, per the previous steps.&lt;/p&gt;
&lt;p&gt;Finally, we have seen how to leverage the Inference endpoint of the deployed ML model to drive the end-to-end workload of intelligent application on top of Kubernetes!&lt;/p&gt;
&lt;p&gt;If you found this content interesting, don&apos;t hesitate to join the conversation:&lt;br /&gt;
- &lt;a href=&quot;https://github.com/kubeflow/kubeflow/issues/7396&quot;&gt;https://github.com/kubeflow/kubeflow/issues/7396&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&quot;https://www.kubeflow.org/docs/about/community/#kubeflow-community-call&quot;&gt;https://www.kubeflow.org/docs/about/community/#kubeflow-community-call&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Integrate Excel with Drools on OpenShift with Knative and Quarkus!</title>
      <link>https://matteomortari.com/blog/2023/integrate-excel-with-drools-on-openshift-with-knative-and-quarkus.html</link>
      <pubDate>Thu, 4 May 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/integrate-excel-with-drools-on-openshift-with-knative-and-quarkus.html</guid>
      	<description>
	&lt;p&gt;In this blog post I want to share the results of a technical exploration in bridging, bringing together and integrating a diverse set of technologies and platforms, ranging from classic spreadsheet applications (Excel) to serverless platforms (Knative on OpenShift) to technical rules executed by our rule engine Drools!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/TWHHBi-0ELU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;h1 class=&quot;wp-block-heading&quot;&gt;Introduction&lt;/h1&gt;   
&lt;p&gt;This content has been inspired by &lt;a href=&quot;https://www.goodreads.com/book/show/117838853-business-rule-engines-and-ai-for-excel-power-users&quot;&gt;a great book&lt;/a&gt; I had the opportunity to read recently (see more below). So I wanted to take on a personal challenge to build a novel example, based on some of the powerful techniques presented in the book, and then add some more, going beyond. Specifically, I wanted to be able to invoke some custom DRL rule evaluation in a serverless way, by connecting Excel with my &lt;a href=&quot;https://quarkus.io&quot;&gt;Quarkus&lt;/a&gt;-based &lt;a href=&quot;https://www.drools.org&quot;&gt;Drools&lt;/a&gt; application served by &lt;a href=&quot;https://knative.dev/docs/&quot;&gt;Knative&lt;/a&gt; on &lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;OpenShift&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;As I wanted a use-case with plenty of realistic data for this technical exploration, I decided to focus my attention on the IoT (Internet of Things) which is another factor revolutionizing the way we live. If I think about the diverse ranges of devices available nowadays, from smart homes to connected cars, these IoT devices in my opinion are changing not only the way we interact with our surroundings… when used sapiently, I believe they can really augment and improve our lives. However, IoT is more than just internet-connected devices! To me, it is also about leveraging various technologies and platforms to create intelligent systems that can automate processes, optimize, and improve our decision-making.&lt;/p&gt;   
&lt;p&gt;More specifically, I wanted to try processing the technical data collected through my smart scale and smart watch, collecting into Excel, and then processing it via the intelligent application described above. This will give us the opportunity to highlight some of the benefits of the integration scope mentioned in the preamble, and a perspective on how these techniques can help your organization or benefit your own use-cases! Before wrapping up, I will share my review of the mentioned book.&lt;/p&gt;   
&lt;h1 class=&quot;wp-block-heading&quot;&gt;Serverless Drools&lt;/h1&gt;   
&lt;p&gt;Let’s dive into the DRL rules:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;rule R1
when
  $r : MeasRecord( morning == true, bpm &amp;lt; 60 || bpm &amp;gt; 100 )
then
  insert(new Advice(&quot;abnormal Blood Pressure in the morning&quot;, 100));
end

rule R2
when
  $r : MeasRecord( weight &amp;lt; weight_m3, weight_m3 &amp;lt; weight_m5 )
then
  insert(new Advice(&quot;downward trend in weight&quot;));
end

rule R3
when
  $r : MeasRecord( weight &amp;gt; weight_m3, weight_m3 &amp;gt; weight_m5 )
then
  insert(new Advice(&quot;upward trend in weight&quot;));
end&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;Here, I want to define some rules which will advise me if specific data measurement is observed. These rules in my opinion are very naturally readable in spite of the technical nature of DRL: I want to emit an advice in case of abnormal bpm, or when there is a specific trend in weight compared to T-3D or T-5D (I take these measurements once each day).&lt;/p&gt;   
&lt;p&gt;Similarly, you could think of analogous DRL rules for your IoT use-case, reacting to events and measurement signals from your sensors or devices!&lt;/p&gt;   
&lt;p&gt;In order to make this intelligent application efficiently consumable as a serverless decision service, I decided to experiment with a number of capabilities of Drools v8 and Quarkus, starting by making use of the Drools v8 &lt;a href=&quot;https://github.com/kiegroup/drools/blob/main/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/guide.adoc#drools-quarkus-extension&quot;&gt;drools-drl-quarkus-extension&lt;/a&gt;.&lt;br&gt;Further, in order for the REST API in my Quarkus application to be easily consumable from external, JavaScript-based services and applications, I needed to enable CORS. A word of warning is important here with regards to the CORS “origin”, that should be tailored to your production use case (as &lt;a href=&quot;https://quarkus.io/guides/http-reference#support-all-origins-in-devmode&quot;&gt;noted in the documentation&lt;/a&gt;); if you decide to build on this example, you might want to consider for your allow-list to be specific to the expected origin of your clients (in my case Swagger UI from OpenShift and Excel ScriptLabs, but you might want to extend to the servers of your Office Add-In, etc):&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;quarkus.http.cors=true
# note: check settings for PROD:
quarkus.http.cors.origins=/.*\\.azureedge\\.net/,/.*\\.openshiftapps\\.com/

quarkus.swagger-ui.always-include=true

quarkus.kubernetes.deployment-target=knative

quarkus.container-image.registry=quay.io
quarkus.container-image.group=mmortari

quarkus.container-image.builder=jib&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;In addition to the CORS configuration, it’s pretty easy to influence the behavior of the final resulting Quarkus application, specifically:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;I want the Swagger UI to be included in the deployed artifact&lt;/li&gt;   
 &lt;li&gt;it will be a Knative Service, so to allow the serveless use-case, including auto-scale to zero&lt;/li&gt;   
 &lt;li&gt;I find easier to publish my container images on Quay.io, to be picked up by my OpenShift instance&lt;/li&gt;   
 &lt;li&gt;to build the container image, I typically use JIB&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;These configuration steps are similar to what described in &lt;a href=&quot;https://blog.kie.org/2022/08/serverless-drools-in-3-steps-kogito-quarkus-kubernetes-and-knative.html&quot;&gt;a previous blog post&lt;/a&gt;, showcasing how it’s really easy to build a Serverless application with Drools and Quarkus! Be sure to &lt;a href=&quot;https://www.youtube.com/watch?v=KGXJ_bEyTmo&quot;&gt;check it out&lt;/a&gt; if you missed it.😉&lt;/p&gt;   
&lt;h1 class=&quot;wp-block-heading&quot;&gt;Excel integration&lt;/h1&gt;   
&lt;p&gt;Here comes the very unusual part, at least for me, where I wanted to apply some of the techniques from the book and then explore even further.🙂&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;First, I collected all the data from my IoT devices; personally I own a couple of smart devices from &lt;a href=&quot;https://www.withings.com&quot;&gt;Withings&lt;/a&gt;, as I appreciate they allow you to easily export an archive of your data, in CSV format: perfect for Excel! Similarly, you might consider expanding on this example by directly interacting instead &lt;a href=&quot;https://developer.withings.com/&quot;&gt;with their APIs&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;The archive exports a ZIP of a collection of CSV files; for my challenge I indeed decided to focus on bpm and weight measurements, which are actually in 2 separate files. To combine this data into a single table I’ve used a Power Query, one of the capabilities presented in the book, in order to connect to the CSV files as data sources and merge them seamlessly.&lt;/p&gt;   
&lt;p&gt;The merge result is something similar to:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/05/Screenshot-2023-05-02-at-18.33.14-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption class=&quot;wp-element-caption&quot;&gt; &lt;em&gt;Merging 2 CSV files in Excel&lt;/em&gt; 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Then, I have defined a custom function in Excel; you can find more information about this capability on &lt;a href=&quot;https://learn.microsoft.com/en-us/office/dev/add-ins/excel/custom-functions-web-reqs#functions-that-return-data-from-external-sources&quot;&gt;Microsoft’s website&lt;/a&gt; as it is one of the most powerful mechanisms available to extend Excel with custom behavior.&lt;/p&gt;   
&lt;p&gt;I should highlight that in the book, you will find many, many other mechanisms to perform an invocation from your Excel sheets to a remote Drools application running on OpenShift; personally, I opted to develop a custom function in order to try something new but also sophisticated, which could be bundled later as a fully-fledged Office Add-In; but the book indeed guides you through many more (and often easier) mechanisms!&lt;/p&gt;   
&lt;p&gt;One of the reasons I loved that read so much, is that it offered a wide portfolio of options to choose from when it comes to integrating Excel with Drools.&lt;/p&gt;   
&lt;p&gt;My final custom Excel function looks like this:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;/** @CustomFunction */
function advices(isodate: string, bpm: number, weight: number,
    weight_m3: number, weight_m5: number): Promise&amp;lt;string&amp;gt; {
  return new Promise(function (resolve, reject) {
    const baseUrl = &quot;https://(...).openshiftapps.com&quot;;
    const payload = JSON.stringify(
      {
        &quot;ts&quot;: isodate,
        &quot;bpm&quot;: bpm &amp;gt; 0 ? bpm : null,
        &quot;weight&quot;: weight,
        &quot;weight_m3&quot;: weight_m3,
        &quot;weight_m5&quot;: weight_m5
      }
    );
    fetch(baseUrl + &quot;/advices&quot;, {
      method: &quot;POST&quot;,
      body: payload,
      headers: {
        &quot;Content-type&quot;: &quot;application/json; charset=UTF-8&quot;
      }
    })
    .then((response) =&amp;gt; response.json())
    .then((json) =&amp;gt; resolve(json))
    .catch((error) =&amp;gt; reject(&quot;unable to connect to Drools&quot;))
  });
}&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;…and it works like a charm!&lt;/p&gt;   
&lt;p&gt;The custom function is invoked by a very simple Excel formula, as one would easily expect:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/05/Screenshot-2023-05-02-at-18.47.04-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption class=&quot;wp-element-caption&quot;&gt; &lt;em&gt;Excel custom function to invoke Drools!&lt;/em&gt; 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;It is also to be noted, again as expected, that when the formulas has been computed for the entire worksheet, the backend Knative service will &lt;em&gt;automatically&lt;/em&gt; scale back to zero:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/05/Screenshot-2023-05-02-at-18.14.34-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption class=&quot;wp-element-caption&quot;&gt; &lt;em&gt;a Knative based serverless backend serving the Excel formulas!&lt;/em&gt; 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;This is super helpful only to consume computing resources when needed, in this case when some Excel worksheet needs to (re-)calculate its formulas!&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;As the final and most important result, we can appreciate the rules processing the data and producing the advice in our Excel file, as defined in the DRL.&lt;/p&gt;   
&lt;p&gt;I believe combining Excel custom and extended behaviors with a serverless backend is truly a powerful combination! Thankfully integrating Quarkus and Drools and deploying our app on OpenShift with Knative is super easy as we’ve seen in this post. I hope this atypical blog post tickles your curiosity on how to integrate Excel or similarly other spreadsheet platforms; if you are interested to know more, I warmly invite you to check out this book…&lt;/p&gt;   
&lt;h1 class=&quot;wp-block-heading&quot;&gt;Book review: Business Rule Engines and AI for Excel Power Users&lt;/h1&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/05/AI-and-Business-Rule-Engines-for-Excel-Power-Users-Cover-Image-1.jpg&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Title: Business Rule Engines and AI for Excel Power Users: Capture and scale your business knowledge into the cloud – with Microsoft 365, Decision Models, and AI tools from IBM and Red Hat&lt;br&gt;Author: Paul Browne&lt;br&gt;ISBN: 9781804619544 (ISBN10: 180461954X)&lt;/p&gt;   
&lt;p&gt;I believe this book is an excellent guide for both software developers and business analysts seeking to scale the automation of their business knowledge into the cloud. It provides an in-depth analysis of how decision models and semantic rules can be combined with other AI models, to solve some of the inherent limitations of Excel –which is an omnipresent tool in every business and industry sector. The book introduces readers to industry-standard open source Drools rule engine and Kogito, and how these can be linked with many of Microsoft&apos;s tools.&lt;/p&gt;   
&lt;p&gt;Paul presents very easy-to-follow examples to teach readers how to author sophisticated decision models, how to develop decision services in order to solve current business challenges using AI (both ML and symbolic AI), and how to combine rules with workflows to deploy a cloud-based solution. The book also covers advanced modeling using the Decision Model and Notation (DMN) open standard and related testing tools.&lt;/p&gt;   
&lt;p&gt;As a reader of this blog, I assume you are already familiar with some of the KIE projects, so you might be tempted to jump straight into reading from Chapter 6 onwards; but my recommendation would be to make sure to revisit the initial chapters nevertheless, especially Chapters 1-2, since they will equip you with important considerations when evaluating the adoption of the powerful techniques presented in this book in your organization. It is also to be noted that while specific to Microsoft tools, the techniques presented in this book (and this inspired blog post) can very likely be analogously applied using other software provider platforms and other hyperscalers!&lt;/p&gt;   
&lt;h1 class=&quot;wp-block-heading&quot;&gt;Conclusion&lt;/h1&gt;   
&lt;p&gt;I hope this blog post intrigued you to check out this new book and to explore more integration opportunities of Drools with other platforms and tools!&lt;/p&gt;   
&lt;p&gt;How are you planning to integrate Drools for your next use-case?&lt;/p&gt;   
&lt;p&gt;Let us know in the comments section below!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Simplify Kubernetes debugging with declarative logic</title>
      <link>https://matteomortari.com/blog/2023/simplify-kubernetes-debugging-with-declarative-logic.html</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/simplify-kubernetes-debugging-with-declarative-logic.html</guid>
      	<description>
	&lt;p class=&quot;has-text-align-center&quot;&gt;&lt;em&gt;We put Drools inside Kubernetes’ control plane …you wouldn’t believe what happened next!&lt;/em&gt; 😉&lt;/p&gt;   
&lt;p&gt;This is a longer post on the current status of explorations with RuleOps; you may want to skim or skip to different sections, depending on your interests.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;table&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;RuleOps in a nutshell&lt;/strong&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;em&gt;&lt;sup&gt;Read time: ~ 1 minute&lt;/sup&gt;&lt;/em&gt;&lt;br&gt;Kubernetes is an orchestration platform, very powerful but also complex with multiple layers of abstraction, interdependent components, relying on automation and orchestration to manage deployments; this can make it difficult at times to pinpoint the actual &lt;em&gt;root cause&lt;/em&gt; of an issue when troubleshooting.&lt;br&gt;&lt;br&gt;We have coined the terms &lt;strong&gt;RuleOps to identify both the abstract concept and the actual solution&lt;/strong&gt; which can pragmatically be of support in many of those scenarios:&lt;br&gt;&lt;br&gt;1. In the context of RuleOps, we believe that a declarative approach helps a lot while defining the root cause analysis, troubleshooting concepts, standard operating procedures (SOP), and is an effective instrument to help in debugging and troubleshooting Kubernetes operations.&lt;br&gt;&lt;br&gt;2. We have developed a real application (based on Drools and Quarkus), which can be used from the command line as well as a continuously running application on a control plane, which demonstrates in practice the RuleOps concepts and techniques. We have implemented some best-practice troubleshooting guides available on the public domain as well as built PoC on some real SOP used by teams that we know.&lt;br&gt;&lt;br&gt;We believe RuleOps is valuable research exploration and a tangible, pragmatic, helpful instrument you can start to use in your day-to-day when managing a Kubernetes cluster.&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/watch?v=ZJ4tUnaGlaY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;h1&gt;Introduction to RuleOps&lt;/h1&gt;   
&lt;p&gt;DevOps practitioners who interact daily with Kubernetes throughout its control plane know the problem of having to apply different resources, through different interactions. Every DevOps engineer has experienced the feeling of having forgotten to create a specific resource, having the cluster in an unknown state or not being sure about what is the best action to do next to continue troubleshooting.&lt;/p&gt;   
&lt;p&gt;For example: if a Pod fails to start, it may be due to a misconfiguration in the Deployment, a problem with the container image, or an issue with the required resources on the cluster itself.&lt;/p&gt;   
&lt;p&gt;For another example: a DevOps team has several configurations in place to ensure two namespaces are properly isolated and related policies to segment the network in the cluster; this requires performing checks and maintenance to mitigate the risk of configuration drift, across the lifecycles of application deployments and other general operations on the cluster.&lt;/p&gt;   
&lt;p&gt;Troubleshooting may require digging through a variety of logs, configurations and exercising other debugging techniques.&lt;/p&gt;   
&lt;p&gt;RuleOps solves this problem by providing a toolchain to help users writing custom rules that will check the consistency of the cluster and more generally speaking, the health of the system.&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;In the following we’ll see some theory behind RuleOps and how it can detect problems in your cluster Control Plane, with a real demo showing the actual rules the users can model and define.&lt;/p&gt;   
&lt;p&gt;Here are some of the topic we’ll cover:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;The team managing the cluster can use RuleOps as a foundation to align on the definition of a healthy system (for example, define what is the expected relationship between resources being developed, define what are the requirements of a strict cluster security configuration), by providing specific checks beyond what Kubernetes can perform out-of-the-box, also correlating internal and custom resources with a high-level declarative language especially optimized for executing a large number of checks.&lt;/li&gt;   
 &lt;li&gt;RuleOps provides useful information about the issues so that DevOps and SRE can easily understand and resolve the issue.&lt;/li&gt;   
 &lt;li&gt;The checks and the rules provided can be packaged in a series of reusable components that can be shared throughout the different DevOps.&lt;/li&gt;   
 &lt;li&gt;In addition to that, RuleOps provides general rules that apply to most common error-cases that improves the debug experience of a vanilla cluster.&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;After understanding RuleOps, users can start defining their own rules to fix the most common Kubernetes problems.&lt;/p&gt;   
&lt;h2&gt;Benefits to the Kubernetes Ecosystem&lt;/h2&gt;   
&lt;p&gt;We strongly believe that RuleOps with its powerful declarative language based on symbolic AI reasoning can help the Kubernetes ecosystem in building more healthy cloud based application, by detecting anomalies in the control plane configuration and improving on the amount of time DevOps and SREs will take to find and resolve problem in a Kubernetes cluster.&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;In addition to that, we’d like to provide some contributions to the conversation on how to improve the robustness of Kubernetes with external tools.&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;Various tools such as monitoring are already available; our focus is to offer the full power of a symbolic AI rule engine in this space.&lt;/p&gt;   
&lt;p&gt;More specifically, even though Kubernetes by itself is a mature project and it’s meant to be reliable and consistent, once App Developers start building applications using the Kubernetes API a whole new set of problems emerge, i.e. how to handle the lifecycle of the custom resources, or how to make sure that error messages from the cluster are useful to the developers that need to detect inconsistent scenarios.&lt;/p&gt;   
&lt;p&gt;Day-2 operations are especially affected, as these broken scenarios will need clear and solvable error messages even after the application has been deployed and it’s currently running.&lt;/p&gt;   
&lt;h2&gt;Why RuleOps&lt;/h2&gt;   
&lt;p&gt;We believe it’s important to highlight that in Kubernetes the &lt;strong&gt;&lt;kbd&gt;etcd&lt;/kbd&gt;&lt;/strong&gt; key-value store is used as the Source of Truth but, on the other hand, typically operations on the cluster (e.g.: through &lt;strong&gt;&lt;kbd&gt;kubectl apply&lt;/kbd&gt;&lt;/strong&gt; ) are performed on&amp;nbsp; several resources at different times, while the global configuration of the cluster is inherently eventually-consistent in nature.&lt;/p&gt;   
&lt;p&gt;This could lead to a global or local configuration drift for cluster resources, and in some way a semantically inconsistent state of the cluster; the probability of reaching such an inconsistent state also correlates with the number of operations performed on the cluster.&lt;/p&gt;   
&lt;p&gt;What we strive to do with RuleOps, in this whitepaper and demo, is to put more Dev skills inside of DevOps: from the software development principles we have a lot of debugging instruments which are at the core of our discipline and at the same time debugging can also be further complemented with a lot of automation using AI (Artificial Intelligence) as we will see in this content. We don&apos;t want to overlook a potential opportunity for process improvement benefitting operations on the kubernetes cluster.&lt;/p&gt;   
&lt;p&gt;We are also aware that AI these days is quite a buzzword, but what we mean for AI in this context is a very &lt;strong&gt;pragmatic AI approach&lt;/strong&gt;, specifically focusing on Rule Engine (previously related to expert systems) and a symbolic AI, used for Knowledge Representation and Reasoning (KRR). Throughout the rest of this document, when we refer to AI, kindly keep this smaller disclaimer in mind.&lt;/p&gt;   
&lt;h2&gt;State of the art in Debugging Kubernetes&lt;/h2&gt;   
&lt;p&gt;A quick &lt;a href=&quot;https://www.google.com/search?q=debugging+kubernetes&quot;&gt;google search&lt;/a&gt; can sometimes be used as a litmus test for the actual day to day reality, especially when facing the needs of “Debugging Kubernetes” operations. The fact that such query returns millions of results and plenty of courses,&amp;nbsp; videos, and other training material is a clear indication that is a hot topic and likely a problem without a trivial solution, but at the same time an opportunity for people to acquire new knowledge, undergo training, and improve their skills.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-09.48.57-2-1-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Another interesting consideration is that many of these “debugging kubernetes” resources are in the form of flowchart, decision tree, or more specifically if-this-do-that, when-this-do-that guides. This is interesting because it expresses a semantic reasoning, which can find a natural translation and equivalent in a semantic rule, such as DRL for Drools (but not limiting to DRL).&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-09.49.04-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;For example: many times the knowledge in these types of resources resembles “&lt;em&gt;please check these things first, if those fail, then check these other things …&lt;/em&gt;” in order to provide a framework to identify the root-cause of the problem; once the root-cause has been identified, corrective actions can be effectively performed.&lt;/p&gt;   
&lt;p&gt;This is the perfect opportunity to automate all of this with KRR and a rule engine, such as Drools!&amp;nbsp;&lt;/p&gt;   
&lt;h2&gt;What RuleOps means&lt;/h2&gt;   
&lt;p&gt;We coined the term RuleOps as an evolution of the term DevOps name.&lt;/p&gt;   
&lt;p&gt;DevOps is a compound name that brings together Development and Operations; we want to play on the term itself and add to the mix also the Rules as coming from rule engine: we believe that the declarative power that can be expressed with the rule definition, together with a lot of the features that are typical of rule engine (such as Drools) really make it a perfect fit for debugging, inspecting and automating a lot of the semantic reasoning on the cluster resources and on the cluster status.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-15.04.18-hcrop-1024x335.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;h1&gt;Demos&lt;/h1&gt;   
&lt;p&gt;In this section, we present with pragmatic examples and real demo and working prototypes, some application of the RuleOps concepts.&lt;/p&gt;   
&lt;h2&gt;Demo: “Relax the ResourceQuota limits for Deployment”&lt;/h2&gt;   
&lt;p&gt;For the first example we would like to make reference to a tutorial in the kubernetes documentation titled “&lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-pod-namespace/&quot;&gt;Configure a Pod Quota for a Namespace&lt;/a&gt;”.&lt;/p&gt;   
&lt;p&gt;Drawing inspiration from that tutorial, we simulate instead the case where a Deployment no longer fit the configured ResourceQuota on the cluster with:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;apiVersion: v1
kind: ResourceQuota
metadata:
 name: pod-demo
spec:
 hard:
   pods: &quot;2&quot;&lt;/pre&gt;   
&lt;p&gt;and:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;apiVersion: apps/v1
kind: Deployment
metadata:
 name: pod-quota-demo
spec:
 selector:
   matchLabels:
     purpose: quota-demo
 replicas: 3
 template:
   metadata:
     labels:
       purpose: quota-demo
   spec:
     containers:
     - name: pod-quota-demo
       image: nginx&lt;/pre&gt;   
&lt;p&gt;Preparing this experiment on a Minikube-based lab environment, accessing the dashboard we can see the deployment is grayed out:&amp;nbsp;&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-11.45.18-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;This scenario can easily be governed by defining a semantic rule using the domain model of kubernetes and in the rule example below we are correlating some of deployment conditions on the actual deployment:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;- name: Relax the ResourceQuota limits Deployment PENDING
  when:
  - given: Deployment
    as: $d
  - given: DeploymentCondition
    having:
    - type == &quot;Available&quot;
    - status == &quot;False&quot;
    from: $d.status.conditions
  - given: DeploymentCondition
    having:
    - message contains &quot;exceeded quota&quot;
    from: $d.status.conditions
  then: |
    insert(new Advice(&quot;Relax the ResourceQuota limits&quot;, ...&lt;/pre&gt;   
&lt;p&gt;And the RuleOps interface provide the defined advisory:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-11.49.39-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;This is a very first example on how to implement a declarative rule on a concept which was expressed by the troubleshooting debugging flowchart section, and instead of manually performing some checks, we automated the same checks in a declarative way.&lt;/p&gt;   
&lt;h2&gt;Demo: “Relax the ResourceQuota limits for StatefulSet”&lt;/h2&gt;   
&lt;p&gt;In this example we would like to make reference to another tutorial in the kubernetes documentation titled “&lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-memory-cpu-namespace/&quot;&gt;Configure Memory and CPU Quotas for a Namespace&lt;/a&gt;”.&lt;/p&gt;   
&lt;p&gt;Drawing inspiration from that tutorial, we simulate instead the case where a StatefulSet no longer fit the configured ResourceQuota on the cluster with:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;apiVersion: v1
kind: ResourceQuota
metadata:
 name: mem-cpu-demo
spec:
 hard:
   requests.cpu: &quot;1&quot;
   requests.memory: 1Gi
   limits.cpu: &quot;2&quot;
   limits.memory: 2Gi&lt;/pre&gt;   
&lt;p&gt;and&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;apiVersion: v1
kind: Pod
metadata:
 name: quota-mem-cpu-demo
spec:
 containers:
   - name: quota-mem-cpu-demo-ctr
     image: nginx
     resources:
       limits:
         memory: &quot;1Gi&quot;
         cpu: &quot;1&quot;
       requests:
         memory: &quot;600Mi&quot;
         cpu: &quot;500m&quot;&lt;/pre&gt;   
&lt;p&gt;and finally&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;apiVersion: apps/v1
kind: StatefulSet
metadata:
 labels:
   app.kubernetes.io/version: 1.0.0-SNAPSHOT
   app.kubernetes.io/name: hello-pvdf
 name: hello-pvdf
 namespace: default
spec:
 replicas: 1
 selector:
   matchLabels:
     app.kubernetes.io/name: hello-pvdf
     app.kubernetes.io/version: 1.0.0-SNAPSHOT
 serviceName: hello-pvdf
 template:
   metadata:
     labels:
       app.kubernetes.io/version: 1.0.0-SNAPSHOT
       app.kubernetes.io/name: hello-pvdf
   spec:
     containers:
       - env:
           - name: KUBERNETES_NAMESPACE
             valueFrom:
               fieldRef:
                 fieldPath: metadata.namespace
           - name: PVDF_DIRECTORY
             value: /mnt/data
         image: quay.io/mmortari/hello-pvdf:1.0.0-SNAPSHOT
         imagePullPolicy: Always
         livenessProbe:
           failureThreshold: 3
           httpGet:
             path: /q/health/live
             port: 8080
             scheme: HTTP
           initialDelaySeconds: 0
           periodSeconds: 30
           successThreshold: 1
           timeoutSeconds: 10
         name: hello-pvdf
         ports:
           - containerPort: 8080
             name: http
             protocol: TCP
         readinessProbe:
           failureThreshold: 3
           httpGet:
             path: /q/health/ready
             port: 8080
             scheme: HTTP
           initialDelaySeconds: 0
           periodSeconds: 30
           successThreshold: 1
           timeoutSeconds: 10
         resources:
           limits:
             cpu: 2000m
             memory: 2Gi
           requests:
             cpu: 500m
             memory: 500Mi
         volumeMounts:
           - mountPath: /mnt/data
             name: my-pvc-claim
             readOnly: false
     terminationGracePeriodSeconds: 10
 volumeClaimTemplates:
   - apiVersion: v1
     kind: PersistentVolumeClaim
     metadata:
       labels:
         app.kubernetes.io/version: 1.0.0-SNAPSHOT
         app.kubernetes.io/name: hello-pvdf
       name: my-pvc-claim
       namespace: default
     spec:
       accessModes:
         - ReadWriteOnce
       resources:
         requests:
           storage: 10Mi
       storageClassName: standard&lt;/pre&gt;   
&lt;p&gt;Preparing this experiment on a Minikube-based lab environment, accessing the dashboard we can see the stateful set is grayed out:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-12.02.56-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;This scenario can also be governed very easily by defining a declarative rule, again using the domain model of kubernetes correlating event from the StatefulSet:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;- name: Relax the ResourceQuota limits StatefulSet PENDING
  when:
  - given: StatefulSet
    as: $s
    having:
    - spec.replicas != status.replicas
  - given: Event
    having:
    - message contains &quot;exceeded quota&quot;
    from: DroolsK8sClient.eventsFor($s)
  then: |
    insert(new Advice(&quot;Relax the ResourceQuota limits&quot;, ...&lt;/pre&gt;   
&lt;p&gt;Again the RuleOps interface automatically generate the advisory:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-12.06.20-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Please notice the name referenced in the advisory “hello-pvdf” is exactly the kubernetes resources we wanted to make reference to!&lt;/p&gt;   
&lt;h2&gt;Demo: “Fix the PersistentVolumeClaim for Pod”&lt;/h2&gt;   
&lt;p&gt;In this example we would like to make reference to another tutorial in the kubernetes documentation titled “&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/&quot;&gt;Configure a Pod to Use a PersistentVolume for Storage&lt;/a&gt;”.&lt;/p&gt;   
&lt;p&gt;Drawing inspiration from that tutorial, we simulate instead the case where a Deployment is not healthy as a PersistentVolumeClaim is still pending because failing to bind on a matching persistent volume on the cluster with:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: task-pv-claim
spec:
 storageClassName: manual
 accessModes:
   - ReadWriteOnce
 resources:
   requests:
     storage: 3Gi&lt;/pre&gt;   
&lt;p&gt;and&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;apiVersion: apps/v1
kind: Deployment
metadata:
 name: pod-quota-demo
spec:
 selector:
   matchLabels:
     purpose: quota-demo
 replicas: 1
 template:
   metadata:
     labels:
       purpose: quota-demo
   spec:
     volumes:
     - name: task-pv-storage
       persistentVolumeClaim:
         claimName: task-pv-claim
     containers:
     - name: pod-quota-demo
       image: nginx
       ports:
         - containerPort: 80
           name: &quot;http-server&quot;
       volumeMounts:
         - mountPath: &quot;/usr/share/nginx/html&quot;
           name: task-pv-storage&lt;/pre&gt;   
&lt;p&gt;Preparing this experiment on a Minikube-based lab environment, accessing the dashboard we can see the deployment is red:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-13.42.32-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We can define a semantic rule to cover this scenario with ease:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;- name: Fix the PersistentVolumeClaim Pod PENDING
  when:
  - given: PersistentVolumeClaim
    as: $pvc
    having:
    - status.phase == &quot;Pending&quot;
  - given: Pod
    as: $pod
    having:
    - status.phase == &quot;Pending&quot;
  - given: Volume
    having:
    - persistentVolumeClaim!.claimName == $pvc.metadata.name
    from: $pod.spec.volumes
  then: |
    insert(new Advice(&quot;Fix the PersistentVolume&quot;, ...&lt;/pre&gt;   
&lt;p&gt;The RuleOps interface automatically generate the relevant advisory:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-13.50.17-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Where we are clearly instructed about the need to fix the requirement of PersistentVolume so that the indicated pvc of the indicated pod can fully deploy.&lt;/p&gt;   
&lt;h2&gt;Extra: Automate it with Event Driven Ansible!&lt;/h2&gt;   
&lt;p&gt;The same demo discussed in the previous chapter, can be further automated integrating it with &lt;a href=&quot;https://www.ansible.com/blog/getting-started-with-event-driven-ansible&quot;&gt;Event Driven Ansible&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;In this case, we extended the semantic rule to send a relevant event to an Ansible rulebook, which will be in charge of defining the appropriate remediating response depending on the type of events, and in the specific case of a missing PersistentVolume, we could invoke a playbook creating a new volume from a NAS and make that available to the Kubernetes cluster. In other scenarios, this integration could identify the requirements of more compute nodes, which could also be provided to the cluster with similar automation.&lt;/p&gt;   
&lt;p&gt;We have demonstrated this integration with some sample rulebook and playbook:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-21-at-09.38.36-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;You can refer to this video for more details:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/watch?v=Y1Cwb0uKgR4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;h2&gt;Demo: “Fix the Service selector: No Pod found for selector”&lt;/h2&gt;   
&lt;p&gt;In this example, we’ll start from the perspective of overlooking the cluster with the dashboard:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-13.57.42-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Everything seems to be working fine –all is green.&lt;/p&gt;   
&lt;p&gt;But actually from an operational perspective we would not be satisfied with the current health of the system, as we will reveal by the end of this demo.&lt;/p&gt;   
&lt;p&gt;We can showcase the command-line version of using RuleOps:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-14.28.27-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this scenario, we are advised that the Service selector is faulty.&lt;/p&gt;   
&lt;p&gt;We believe this is of great help, because despite all dashboards looking green, the expressivity of the declarative rules allow us to capture the semantics of a healthy cluster –or a degraded cluster, as this demonstration highlighted.&lt;/p&gt;   
&lt;p&gt;In summary:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-14.28.05-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;h2&gt;Demo: “Fix the Service selector because it sounds like another Pod name but not an exact match”&lt;/h2&gt;   
&lt;p&gt;This demo is a variation of the previous one, where we would like to highlight other characteristics of the expressive power of the semantic rules, in order to catch name similarities which may produce inconsistent or degraded state of the cluster.&lt;/p&gt;   
&lt;p&gt;Such rules could easily be expressed as, for example:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;- name: Fix the Service selector sounds like Pod name but not an exact match
  when:
  - given: Service
    as: $svc
    having:
    - metadata.name != &quot;kubernetes&quot;
    - &apos;$selectorName: spec!.selector[&quot;app.kubernetes.io/name&quot;]&apos;
  - given: Pod
    as: $pod
    having:
    - &apos;metadata.labels[&quot;app.kubernetes.io/name&quot;] != $selectorName&apos;
    - &apos;metadata.labels[&quot;app.kubernetes.io/name&quot;] soundslike $selectorName&apos;
  then: |
    insert(new Advice(&quot;Service selector hint&quot;, ...&lt;/pre&gt;   
&lt;p&gt;In order to detect those anomalies with an increased level of nuances:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-14.33.31-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;h2&gt;Demo: “Fix the Service targetPort and the containerPort”&lt;/h2&gt;   
&lt;p&gt;In this example we want to highlight the expressive power of the semantic rule making use of existential operators:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;- name: Fix the Service targetPort and the containerPort
  when:
  - given: Service
    as: $svc
    having:
    - metadata.name != &quot;kubernetes&quot;
  - given: ServicePort
    as: $sPort
    from: $svc.spec.ports
  - given: Pod
    as: $pod
    having:
    - &apos;mapContains(metadata.labels, $svc.spec.selector)&apos;
  - not:
    - all:
      - given: Container
        as: $c
        from: $pod.spec.containers
      - given: ContainerPort
        having:
        - containerPort == $sPort.targetPort.intVal
        from: $c.ports
  then: &apos;insert(new Advice(&quot;Fix the Service targetPort and the containerPort&quot;, ...&lt;/pre&gt;   
&lt;p&gt;In order to detect mismatch between the definition in a service and its related pod:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/03/Screenshot-2023-03-07-at-14.47.02-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;It is to be noted how making use of existential operators in semantic rules make it very easy to express declaratively these types of checks, with a relatively lower effort if compared to coding the same manually by hand using an imperative-style programming language.&lt;/p&gt;   
&lt;h1&gt;Conclusions (for today!)&lt;/h1&gt;   
&lt;p&gt;We have introduced RuleOps, a concept and a very powerful instrument based on symbol AI, to help with debugging Kubernetes operations.&amp;nbsp; We have demonstrated with some entry-level but also pragmatic use-cases how RuleOps supports the DevOps practitioners while developing and deploying their application on Kubernetes. We believe RuleOps is valuable research exploration and a very helpful instrument you can start to use today, in your day-to-day management of Kubernetes cluster and cloud-native applications!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>CloudEvents labeling and classification with Drools</title>
      <link>https://matteomortari.com/blog/2023/cloudevents-labeling-and-classification-with-drools.html</link>
      <pubDate>Wed, 8 Feb 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/cloudevents-labeling-and-classification-with-drools.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/v3E_zX3azMw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;This blog post is a quick update on a demo in labeling CNCF’s CloudEvents.&lt;/p&gt;   
&lt;h1&gt;Introduction&lt;/h1&gt;   
&lt;p&gt;Categorizing events is a general, common use-case; in the context of this post, we will delve into labeling CNCF’s CloudEvents for Intelligent Response Management (IRM) which can find application in several ways.&lt;/p&gt;   
&lt;p&gt;One way is to categorize and prioritize different types of events based on their urgency or importance; for example: a SRE team might label an event as &quot;critical&quot; if it involves a major service outage, or &quot;low priority&quot; if it is a minor issue of a sub-system that can be resolved at a later time. This allows the team to quickly respond to the most pressing issues and allocate resources accordingly.&lt;/p&gt;   
&lt;p&gt;Additionally, labeling events can also be used to track and analyze patterns in a system (or cluster) behaviors, which can help to identify potential problems before they occur and improve the overall reliability of the system by implementing corrective actions preventively.&lt;/p&gt;   
&lt;p&gt;This demo make use of several technologies:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.drools.org/learn/video.html&quot;&gt;Drools&lt;/a&gt; and YaRD for the rule definition and evaluation&lt;/li&gt;   
 &lt;li&gt;&lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; for cloud native based decisioning&lt;/li&gt;   
 &lt;li&gt;&lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; for cloud native Java development on top of Kubernetes&lt;/li&gt;   
 &lt;li&gt;&lt;a href=&quot;https://cloudevents.io/&quot;&gt;CloudEvents&lt;/a&gt; –this is the format of the event data that we want to process&lt;/li&gt;   
 &lt;li&gt;Kafka as an event broker&lt;/li&gt;   
 &lt;li&gt;PostgreSQL as our data store; we&apos;re using specifically PostgreSQL for very interesting query capabilities that this RDBMS can offer&lt;/li&gt;   
 &lt;li&gt;&lt;a href=&quot;https://github.com/vladmihalcea/hibernate-types#readme&quot;&gt;Hibernate types&lt;/a&gt; to define our custom types on top of PostgreSQL&lt;/li&gt;   
 &lt;li&gt;&lt;a href=&quot;https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/&quot;&gt;Quarkus Quinoa&lt;/a&gt; extension&lt;/li&gt;   
 &lt;li&gt;&lt;a href=&quot;https://www.patternfly.org/v4/&quot;&gt;Patternfly&lt;/a&gt; for the web-based GUI&lt;/li&gt; 
&lt;/ul&gt;   
&lt;h1&gt;Architecture&lt;/h1&gt;   
&lt;p&gt;The following is a high level diagram of the overall architecture for this demo:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/02/Screenshot-2023-01-25-at-15.51.51-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;On the left hand side, the incoming CloudEvents instance that we want to process by labeling, is received by the endpoint which represents one of the possible inputs for this application. The CloudEvents instance is then immediately placed on a kafka topic, which is used to better isolate the ingress portion of this application from the rest of the processing pipeline.&lt;/p&gt;   
&lt;p&gt;The processing pipeline starts with a labeling processor: this is the component responsible for applying the rules to enrich the CloudEvents instance with the required and applicable labels. As a result, the received message is now enriched with labeling and it gets persisted inside the data store.&lt;/p&gt;   
&lt;p&gt;PostgreSQL is used specifically here as it provides hierarchical labels via &lt;kbd&gt;ltree&lt;/kbd&gt; data type and related query capabilities, which are very useful in categorization applications such as this one. These advanced query capabilities are also foundational to potentially re-process the same CloudEvents instance, after some further augmentation or additional manual labeling.&lt;/p&gt;   
&lt;p&gt;In the context of this article, the web-based GUI is provisional and will be used only as a practical demonstrator for the rich query capabilities.&lt;/p&gt;   
&lt;h1&gt;Walkthrough&lt;/h1&gt;   
&lt;p&gt;A CloudEvents instance is submitted to this application, for example:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{
      &quot;specversion&quot;: &quot;1.0&quot;,
      &quot;id&quot;: &quot;matteo-8eb9-43b2-9313-22133f2c747a&quot;,
      &quot;source&quot;: &quot;example&quot;,
      &quot;type&quot;: &quot;demo20220715contextlabel.demotype&quot;,
      &quot;data&quot;: {
        &quot;host&quot;: &quot;basedidati.milano.local&quot;,
        &quot;diskPerc&quot;: 70,
        &quot;memPerc&quot;: 50,
        &quot;cpuPerc&quot;: 20
      }
    }&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;The data context of the CloudEvents instance pertains to some host which came under supervision due to resource load. We now want to classify this context/case, using some labels. We may have more than one label. Each label is hierarchical (&lt;kbd&gt;root.branch1.branch2.leaf&lt;/kbd&gt;).&lt;/p&gt;   
&lt;p&gt;We want to classify the hostname based on its relevance to the department, unit, person or team responsible for it. To do so, a simple decision table provides an easy solution. For example, we can classify the hostname based on geographical location or determine the type of server based on the hostname. Ultimately, we might want to setup a labeling rule for who&apos;s on call, something like the following decision table using &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;JQ expressions&lt;/a&gt;:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;   type: DecisionTable
        inputs: [&apos;.location&apos;, &apos;.type&apos;]
        rules:
        - when: [&apos;startswith(&quot;location.emea&quot;)&apos;, &apos;. == &quot;type.db&quot;&apos;]
          then: &apos;&quot;oncall.EMEA.dbadm&quot;&apos;
        - when: [&apos;startswith(&quot;location.emea&quot;) | not&apos;, &apos;. == &quot;type.db&quot;&apos;]
          then: &apos;&quot;oncall.CORP.dbadm&quot;&apos;
        - when: [&apos;true&apos;, &apos;. == &quot;type.nas&quot;&apos;]
          then: &apos;&quot;oncall.CORP.it&quot;&apos;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;For example, a CloudEvents context may be labeled as follows:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;type.db&lt;/li&gt;   
 &lt;li&gt;location.emea.italy.milan&lt;/li&gt;   
 &lt;li&gt;oncall.EMEA.dbadm&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;For the PostgreSQL DDL we currently have:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;                      Table &quot;public.cecase&quot;
     Column  |          Type          | Collation | Nullable | Default 
    ---------+------------------------+-----------+----------+---------
     id      | bigint                 |           | not null | 
     ceuuid  | character varying(255) |           |          | 
     context | jsonb                  |           |          | 
     mytag   | ltree[]                |           |          | 
    Indexes:
        &quot;cecase_pkey&quot; PRIMARY KEY, btree (id)
        &quot;mytag_gist_idx&quot; gist (mytag)
        &quot;mytag_idx&quot; btree (mytag)&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;Please notice we’re taking advantage here of PostgreSQL&apos;s &lt;kbd&gt;jsonb&lt;/kbd&gt; for storing the original CloudEvents context, and &lt;kbd&gt;ltree[]&lt;/kbd&gt; data type for searching ad-hoc with indexing the hierarchical labels.&lt;/p&gt;   
&lt;p&gt;The latter is extremely helpful also to setup queries making use of &lt;kbd&gt;&amp;lt;@&lt;/kbd&gt; and &lt;kbd&gt;~&lt;/kbd&gt; operators for PostgreSQL which performs on the &lt;kbd&gt;ltree&lt;/kbd&gt;&lt;strong&gt; &lt;/strong&gt;data type, showcased below.&lt;/p&gt;   
&lt;p&gt;As the data flows into the application, we can use the provisional web-based GUI which provide a convenient way to consume the backend REST API(s) developed on Quarkus:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/02/image-1024x601.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In the screenshot above, you can access all the records from the table, where the labels have been applied by the rule definition.&lt;/p&gt;   
&lt;p&gt;We can browse by &lt;em&gt;having at least one label having the specified parent&lt;/em&gt;, with a query like:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;SELECT * FROM cecase WHERE mytag &amp;lt;@ &apos;oncall.CORP&apos;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;For example, if we want all the records having at least a label for the &lt;kbd&gt;oncall.CORP&lt;/kbd&gt; rooting:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/02/image-1-1024x601.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We can browse by &lt;em&gt;having at least one label having the specified ltree&lt;/em&gt;, with a query like”&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;SELECT * FROM cecase WHERE mytag ~ &lt;span style=&quot;background-color: initial; font-family: inherit; font-size: inherit; color: initial;&quot;&gt;*.emea.*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;For example, if we want all the records having at least a label for the &lt;em&gt;.emea.&lt;/em&gt; (a branch named emea in any point in the hierarchical label):&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/02/image-2-1024x601.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Don’t forget to check out the video linked above, as it demonstrates the demo working live as the data is being sent to the application!&lt;/p&gt;   
&lt;p&gt;If you want to checkout the source, here is the code repo: &lt;a href=&quot;https://github.com/tarilabs/demo20220715contextlabel#readme&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tarilabs/demo20220715contextlabel#readme&quot;&gt;https://github.com/tarilabs/demo20220715contextlabel#readme&lt;/a&gt;&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;These advanced query capabilities offered by PostgreSQL can be used as a foundation to identify events due to reprocessing, manual inspection, triggering a workflow, etc. …but that is maybe subject for a second iteration on this demo...&lt;/p&gt;   
&lt;h1&gt;Conclusions&lt;/h1&gt;   
&lt;p&gt;This demo showcases the power of combining declarative logic, persistence and other technologies to process and label CloudEvents effectively! We defined our logic using a combination of expression and rules in the form of decision tables, combined with the use of PostgreSQL as a data store thanks to its advanced query capabilities, allowing for a more efficient and effective handling of the events.&lt;/p&gt;   
&lt;p&gt;We hope you enjoyed our demo and look forward to hearing your feedback!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Exceptional rules, with Drools and Kogito</title>
      <link>https://matteomortari.com/blog/2023/exceptional-rules-with-drools-and-kogito.html</link>
      <pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/exceptional-rules-with-drools-and-kogito.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/WGpjuietqmw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;Managing exceptional rules is easy, thanks to Drools and Kogito!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/01/image-4.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this use-case, we have a &lt;em&gt;base&lt;/em&gt; business process and a &lt;em&gt;default&lt;/em&gt; knowledge base with rules, which can be overridden by specific entities or departments as needed.&lt;/p&gt;   
&lt;p&gt;We actually have several architectural options we could implement!&lt;/p&gt;   
&lt;p&gt;The simplest architectural option I can think about, draws inspiration from this book by Alan Fish:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/01/image-1.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption class=&quot;wp-element-caption&quot;&gt; &lt;sub&gt;&quot;Knowledge Automation: How to Implement Decision Management in Business Processes&quot;&lt;br&gt;Book by Alan N. Fish&lt;/sub&gt; 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;which is a great book by the way if you &lt;em&gt;also&lt;/em&gt; want to understand the main ideas prequel to the DMN standard!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/01/image-3.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption class=&quot;wp-element-caption&quot;&gt; &lt;sub&gt;Exceptional rules using only DMN&lt;/sub&gt; 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In a decision node in DMN, we check if any exception is applicable, and we collect the exceptions in a list.&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;If the exception list is &lt;em&gt;empty&lt;/em&gt;, we apply the default knowledge and rules.&lt;/li&gt;   
 &lt;li&gt;Otherwise, we apply the rules related to the &lt;em&gt;most relevant&lt;/em&gt; exceptions from the list.&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;You may substitute the BKM nodes with Decision Service, say coming from other DMN models!&lt;/p&gt;   
&lt;p&gt;Another option is to model this with a combination of BPMN and DMN and rules, the idea is similar:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/01/image-5.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption class=&quot;wp-element-caption&quot;&gt; &lt;sub&gt;Managing exceptional rules with BPMN and DMN&lt;/sub&gt; 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The default branch applies the default knowledge base and would be followed, &lt;em&gt;unless&lt;/em&gt; in the predetermination task we have evaluated we must follow one of the exceptional types of branches.&lt;/p&gt;   
&lt;p&gt;A final option would be to deploy each knowledge base –the default one, the different exceptional ones– each as its own Kogito microservice on a cloud native environment such as Kubernetes:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2023/01/image-9-1024x621.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Then, you can orchestrate them using a Serverless Workflow, which will be in charge of invoking the needed cloud-native decision service.&lt;/p&gt;   
&lt;p&gt;As you have seen, managing exceptional rules is easy, thanks to Drools and Kogito!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Transparent ML, integrating Drools with AIX360</title>
      <link>https://matteomortari.com/blog/2022/transparent-ml-integrating-drools-with-aix360.html</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/transparent-ml-integrating-drools-with-aix360.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/rDghxB8F4nU?t=20&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;Following up from &lt;a href=&quot;https://blog.kie.org/2022/04/integrating-drools-dmn-engine-with-ibm-open-prediction-service.html&quot;&gt;a previous blog post&lt;/a&gt; about integrating Drools with the Open Prediction Service, in this new post we want to share the current results from another exploration work: this time integrating Drools with research on Transparent Machine Learning by IBM.&lt;/p&gt;   
&lt;h2&gt;Introduction&lt;/h2&gt;   
&lt;p&gt;Transparency is a key requirement in many business sectors, from FSI (Financial Services Industry), to Healthcare, to Government institutions, and many others.&lt;/p&gt;   
&lt;p&gt;In more recent years, a generalized need for increased transparency in the decision making processes has gained a great deal of attention from several different stakeholders, especially when it comes to automated decisioning and AI-based decision services.&lt;/p&gt;   
&lt;p&gt;Specifically in the Eurozone, this ties with the &lt;a href=&quot;https://en.wikipedia.org/wiki/General_Data_Protection_Regulation&quot;&gt;GDPR regulation&lt;/a&gt; and the requirement for explainability in the way businesses automate processes and decision making. Additionally, an “&lt;a href=&quot;https://digital-strategy.ec.europa.eu/en/policies/european-approach-artificial-intelligence&quot;&gt;Artificial Intelligence Act&lt;/a&gt;” is proposed and currently under discussion at the European Commission: under the current status of the proposal several risk levels are identified. The integration of AI in the business process and decision model will likely require explainability, transparency and a conformity assessment, depending on the applicable risk level:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image-2-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In other parts of the world, similar legislations are coming into effect or are currently being proposed.&lt;/p&gt;   
&lt;p&gt;You can read more details in &lt;a href=&quot;https://medium.com/@greger_ottosson/transparent-ml-in-enterprise-decisions-intro-8c01438c11c5&quot;&gt;this article on Medium&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;With these considerations in mind, we will explore how to leverage rule induction strategies and specific types of machine learning models, with the intent of producing predictive models which can integrate with effective results into this general context.&lt;/p&gt;   
&lt;h2&gt;Transparent ML with Drools and AIX360&lt;/h2&gt;   
&lt;p&gt;One way to address some of the problems and requirements highlighted in the previous section is to use Machine Learning to generate specific types of models that are inherently readable and transparent.&lt;/p&gt;   
&lt;p&gt;As we will see in this blog post, a &lt;em&gt;transparent&lt;/em&gt; predictive model can be handed over easily to the next phase as a decision model, in order to be evaluated as-is, but most importantly for the ability to be inspected and authored directly!&lt;/p&gt;   
&lt;p&gt;Comparing a Transparent ML approach with the broader general Machine Learning, we can highlight some of its characteristics:&lt;/p&gt;   
&lt;div class=&quot;wp-block-columns&quot;&gt; 
 &lt;div class=&quot;wp-block-column&quot; style=&quot;flex-basis:100%&quot;&gt; 
  &lt;div class=&quot;row justify-content-center text-center&quot;&gt;
   &lt;figure class=&quot;figure&quot;&gt; 
    &lt;table&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td class=&quot;has-text-align-left&quot; data-align=&quot;left&quot;&gt;&lt;strong&gt;General Machine Learning evaluation&lt;/strong&gt;:&lt;/td&gt; 
       &lt;td&gt;&lt;strong&gt;Transparent ML approach&lt;/strong&gt;:&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td class=&quot;has-text-align-left&quot; data-align=&quot;left&quot;&gt;All supported model types, but black box evaluation&lt;/td&gt; 
       &lt;td&gt;Model can be inspected, authored, evaluated&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td class=&quot;has-text-align-left&quot; data-align=&quot;left&quot;&gt;Accuracy focused&lt;/td&gt; 
       &lt;td&gt;Transparency focused&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td class=&quot;has-text-align-left&quot; data-align=&quot;left&quot;&gt;eXplainable AI complements, such as &lt;a href=&quot;https://kogito.kie.org/trustyai/&quot;&gt;TrustyAI&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;Intrinsically eXplainable&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td class=&quot;has-text-align-left&quot; data-align=&quot;left&quot;&gt;MLOps —governed by data science&lt;/td&gt; 
       &lt;td&gt;Business centric governance&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td class=&quot;has-text-align-left&quot; data-align=&quot;left&quot;&gt;Multiple runtimes&lt;/td&gt; 
       &lt;td&gt;Potentially single runtime&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
   &lt;/figure&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;   
&lt;p&gt;Naturally the transparent ML approach has its limitations; we will discuss alternative approaches in the conclusions of this blog post.&lt;/p&gt;   
&lt;p&gt;An example pipeline can be summarized as follows:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image-3-1024x262.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;For the examples in this blog post, we will use the &lt;a href=&quot;https://archive.ics.uci.edu/ml/datasets/Adult&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://archive.ics.uci.edu/ml/datasets/Adult&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://archive.ics.uci.edu/ml/datasets/Adult&quot;&gt;https://archive.ics.uci.edu/ml/datasets/Adult&lt;/a&gt; dataset&amp;nbsp; (predicting if income exceeds $50K/yr from census data).&lt;/p&gt;   
&lt;p&gt;Let’s get started!&lt;/p&gt;   
&lt;h2&gt;Rule Set induction&lt;/h2&gt;   
&lt;p&gt;In this section we will make use of the &lt;a href=&quot;https://github.com/Trusted-AI/AIX360&quot;&gt;AI Explainability 360 toolkit&lt;/a&gt;, an open-source library that supports interpretability and explainability of datasets and machine learning models.&lt;/p&gt;   
&lt;p&gt;Our goal in this phase is to generate a predictive model from the UCI Adult dataset, using Machine Learning techniques:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image10-1024x313.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;To generate a &lt;em&gt;transparent&lt;/em&gt; predictive model, we can drive the generation of a RuleSet &lt;a href=&quot;https://blog.kie.org/2021/02/predictions-in-kogito-pmml-endpoints-with-openapi.html&quot;&gt;PMML model&lt;/a&gt;, as explained in the following Jupyter notebook &lt;a href=&quot;https://github.com/Trusted-AI/AIX360/tree/master/examples/rule_induction&quot;&gt;examples at this link&lt;/a&gt;:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image1-1024x664.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;As a result of this, we have now generated a set of rules, in the form of a PMML RuleSet, which represents the transparent predictive model for the Adult dataset:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image12-1024x572.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;If you are interested to delve into more details about using AIX360 and related algorithms, you can check out &lt;a href=&quot;https://medium.com/@greger_ottosson/transparent-ml-for-enterprise-decisions-rule-sets-d8f55bee3a00&quot;&gt;this article on Medium&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Drools&lt;/h2&gt;   
&lt;p&gt;In this section, we will transform the result from the previous steps into an executable decision model, which can also be directly authored.&lt;/p&gt;   
&lt;p&gt;Please note: in a different context, where the only requirement is the execution of predictive models in general, you can simply make reference to the PMML support for Drools from the &lt;a href=&quot;https://docs.drools.org/7.73.0.Final/drools-docs/html_single/index.html#drools.PMML&quot;&gt;documentation&lt;/a&gt;, or to integration blueprints such as the integration of Drools with IBM Open Prediction Service from a &lt;a href=&quot;https://blog.kie.org/2022/04/integrating-drools-dmn-engine-with-ibm-open-prediction-service.html&quot;&gt;previous blog post&lt;/a&gt;. In this article instead, as premised, we’re interested in the result of a transparent prediction model, which can be fully inspected, authored and (naturally!) evaluated.&lt;/p&gt;   
&lt;p&gt;Specifically, we will transform the transparent predictive model serialized as a RuleSet, into a DMN model with DMN Decision Tables.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image6-1024x236.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;To perform this transformation, we will make use of the kie-dmn-ruleset2dmn utility; this is available as a developer API, and as a command line utility too.&lt;/p&gt;   
&lt;p&gt;You can download a published version of the command line utility (executable .jar) from &lt;a href=&quot;https://repo1.maven.org/maven2/org/kie/kie-dmn-ruleset2dmn-cli/8.27.0.Beta/kie-dmn-ruleset2dmn-cli-8.27.0.Beta.jar&quot;&gt;this link&lt;/a&gt;; otherwise, you can lookup a more recent version directly from &lt;a href=&quot;https://mvnrepository.com/artifact/org.kie/kie-dmn-ruleset2dmn-cli&quot;&gt;Maven central here&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;To transform the RuleSet file into a DMN model, you can issue the following command:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&lt;strong&gt;$ java -jar kie-dmn-ruleset2dmn-cli-8.27.0.Beta.jar adult.pmml --output=adult.dmn&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;This will result in a .dmn file generated, which you can author with the Kogito Tooling and evaluate as usual with the &lt;a href=&quot;https://www.drools.org/learn/dmn.html&quot;&gt;Drools DMN engine&lt;/a&gt;!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image5-1024x572.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We can upload the generated .dmn file onto the &lt;a href=&quot;https://dmn.new&quot;&gt;DMN.new&lt;/a&gt; sandbox:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image2-1024x664.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We can make use of the Kie Sandbox extended services, to evaluate locally the DMN model, as-is or authored as needed!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image3-1024x394.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;It’s interesting to note the static analysis of the DMN decision table identifies potential gaps in the table, and subsumptions in the rules inducted during the Machine Learning phase; this is expected, and can be authored directly depending on the overall business requirements.&lt;/p&gt;   
&lt;p&gt;From the model evaluation perspective, overlapping rules are not a problem, as they would evaluate to the same prediction; this is a quite common scenario when the ML might have identified overlapping “clusters” or grouping over a number of features, leading to the same output.&lt;/p&gt;   
&lt;p&gt;From a decision table perspective however, overlapping rules can be simplified, as a more compact representation of the same table semantic is often preferable in decision management.&lt;/p&gt;   
&lt;p&gt;Here it is up to the business to decide if to keep the table as translated from the original predictive model, or to leverage the possibilities offered by the transparent ML approach, and simplify/compact the table for easier read and maintenance by the business analyst.&lt;/p&gt;   
&lt;h2&gt;Deploy&lt;/h2&gt;   
&lt;p&gt;We can deploy directly from the KIE Sandbox:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image8-1024x664.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Our Transparent prediction and decision model is available as a deployment on OpenShift !&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image11-1024x640.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;As you can see, with just the click of a button in the KIE Sandbox, our transparent ML model has been easily deployed on OpenShift.&lt;/p&gt;   
&lt;p&gt;If you want to leverage the serverless capabilities of Knative for auto-scaling (including auto scale to zero!) for the same predictive model, you can consider packaging it as a Kogito application. You can find more information in this &lt;a href=&quot;https://blog.kie.org/2022/08/serverless-drools-in-3-steps-kogito-quarkus-kubernetes-and-knative.html&quot;&gt;other blog post and video tutorial&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Conclusion&lt;/h2&gt;   
&lt;p&gt;We have seen how a Transparent ML approach can provide solutions to some of the business requirements and conformance needs to regulations such as GDPR or AI Act; we have seen how to drive rule induction by generating predictive models which are inherently transparent, can be authored directly as any other decision model, and can be deployed on a cloud-native OpenShift environment.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/09/image7-1024x551.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this post, we have focused ourselves on using directly upstream AIX360 and Drools. You can refer to the above diagram for commercial solutions by IBM and Red Hat that include these projects too, such as &lt;a href=&quot;https://medium.com/ibm-data-ai/transparent-machine-learning-in-ibm-business-automation-b75cd8aed944&quot;&gt;IBM AIMEE&lt;/a&gt;, &lt;a href=&quot;https://developers.redhat.com/products/red-hat-decision-manager/overview&quot;&gt;Red Hat Decision Manager&lt;/a&gt;, &lt;a href=&quot;https://www.ibm.com/cloud/blog/announcements/ibm-expands-business-automation-portfolio-with-open-source-process-and-decision-automation#:~:text=DMN1.4%2Dcompliant%20runtime&quot;&gt;IBM Business Automation Manager Open Edition&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;If you are interested in additional capabilities for eXplainable AI solutions, check-out the &lt;a href=&quot;https://kogito.kie.org/trustyai/&quot;&gt;TrustyAI initiative at this link&lt;/a&gt;!&lt;/p&gt;   
&lt;p&gt;The Transparent ML predictive model, now available as a decision service, can be integrated in other DMN models and other applications, as needed. For example, the transparent prediction on the Adult dataset (predicting if income exceeds $50K/yr) could become invocable as part of another decision service that decides on the applicability for the requests of issuing a certain type of credit card.&lt;/p&gt;   
&lt;p&gt;Another possible integration could be to employ a transparent ML predictive model in the form of scorecards, inside a broader DMN model for segmentation; that is, first identify the applicable category/segment based on the input data, and then apply one of several score cards for the specific segment.&lt;/p&gt;   
&lt;p&gt;Don’t miss on checking out the &lt;a href=&quot;https://decisioncamp2022.wordpress.com/program/&quot;&gt;DecisionCamp 2022 presentations&lt;/a&gt; on related Transparent ML topics!&lt;/p&gt;   
&lt;p&gt;Hope you have enjoyed this blog post, showcasing integration of several technologies to achieve a transparent ML solution!&lt;/p&gt;   
&lt;p&gt;Questions? Feedback?&lt;br&gt;Let us know with the comment section below!&lt;/p&gt;   
&lt;p&gt;Special thanks for Greger Ottosson and Tibor Zimanyi for their help while crafting this content.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>a DMN FEEL handbook</title>
      <link>https://matteomortari.com/blog/2022/a-dmn-feel-handbook.html</link>
      <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/a-dmn-feel-handbook.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/jPhAynN73Jw a DMN FEEL handbook &amp;quot;promotion&amp;quot; video :)&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;We&apos;re introducing an (experimental) DMN FEEL handbook, an helpful companion for your DMN modeling activities!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/07/Screenshot-2022-07-11-at-09.19.28-2-1024x576.jpg&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;You can access this new helpful resource at the following URL: &lt;a href=&quot;https://kiegroup.github.io/dmn-feel-handbook&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kiegroup.github.io/dmn-feel-handbook&quot;&gt;https://kiegroup.github.io/dmn-feel-handbook&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;Key features include:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;FEEL built-in functions organised by category&lt;/li&gt;
 &lt;li&gt;tested and integrated FEEL examples&lt;/li&gt;
 &lt;li&gt;Responsive design: easily access on Mobile, Tablet and Desktop from your favourite browser!&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;...and many more!&lt;/p&gt;   
&lt;h2&gt;Implementation details&lt;/h2&gt;   
&lt;p&gt;For the technically curious, this section will highlight some of the technical implementation choices for the realisation of this handbook.&lt;/p&gt;   
&lt;p&gt;If you want to just use this handbook, you are free to skip this section! :)&lt;/p&gt;   
&lt;p&gt;The framework used to render this handbook is called &lt;a href=&quot;https://github.com/slatedocs/slate&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Slate&lt;/a&gt;; it&apos;s very convenient to use it when, in general, you want a neat API documented with use-cases and examples. This makes it a perfect framework candidate to build a technical manual of a &lt;em&gt;very specific aspect&lt;/em&gt; --the FEEL expression language of DMN. Naturally we&apos;re keeping Antora for the general documentation of Drools, which is more powerful for the user-manuals and modularising content.&lt;/p&gt;   
&lt;p&gt;Then, in order to CI the FEEL snippets and examples in the handbook, we&apos;re leveraging the awesome &lt;a href=&quot;https://www.jbang.dev/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;JBang&lt;/a&gt;! As you can see in the Java_script source (&lt;a href=&quot;https://github.com/kiegroup/dmn-feel-handbook/blob/3a36dc2ea9663a5b7b5100813395c4ee583b13fb/test.java#L97-L124&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt;) we&apos;re parsing the content of the Markdown file to search for codeblocks related to FEEL. Each codeblock related to FEEL is then evaluated, to make sure it does not error or misbehave.&lt;/p&gt;   
&lt;p&gt;This allowed us to catch small typos, &lt;a href=&quot;https://github.com/kiegroup/kie-docs/pull/4218/files&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;such as this one&lt;/a&gt; which we corrected in the main docs. I got the inspiration to implement this approach by reading the Rust manual. If you are familiar with that book, you will likely recognise where &lt;a href=&quot;https://doc.rust-lang.org/book/ch00-00-introduction.html#how-to-use-this-book&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Ferris inspired me&lt;/a&gt; :).&lt;/p&gt;   
&lt;p&gt;Finally, we integrated the JBang! tests with CI with a &lt;a href=&quot;https://github.com/kiegroup/dmn-feel-handbook/blob/main/.github/workflows/test.yml#L22-L25&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;simple GitHub Action&lt;/a&gt;, and then we serve the content via GitHub Pages.&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;Don&apos;t forget to checkout this DMN FEEL handbook today!&lt;/p&gt;   
&lt;p class=&quot;has-text-align-center&quot;&gt;&lt;a href=&quot;https://kiegroup.github.io/dmn-feel-handbook&quot;&gt;https://kiegroup.github.io/dmn-feel-handbook&lt;/a&gt;&lt;/p&gt;   
&lt;p&gt;Do you like it? Feedback? Let us know!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Serverless Drools in 3 steps: Kogito, Quarkus, Kubernetes and Knative!</title>
      <link>https://matteomortari.com/blog/2022/serverless-drools-in-3-steps-kogito-quarkus-kubernetes-and-knative.html</link>
      <pubDate>Tue, 2 Aug 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/serverless-drools-in-3-steps-kogito-quarkus-kubernetes-and-knative.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/KGXJ_bEyTmo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;This short tutorial walks you through the configuration and deployment of a simple &lt;a href=&quot;https://www.drools.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Drools&lt;/a&gt; serverless application, including autoscaling with scale to zero, thanks to &lt;a href=&quot;https://kogito.kie.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Kogito&lt;/a&gt;, &lt;a href=&quot;https://quarkus.io/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Quarkus&lt;/a&gt;, OpenShift Serverless with Kubernetes and &lt;a href=&quot;https://knative.dev/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Knative&lt;/a&gt;!&lt;/p&gt;   
&lt;h2 id=&quot;step1&quot;&gt;Step 1: Drools app creation with code.quarkus.io&lt;/h2&gt;   
&lt;p&gt;To generate the application as shown in the video, you can use this link: &lt;a href=&quot;https://code.quarkus.io/?e=org.kie.kogito%3Akogito-quarkus-decisions&amp;amp;e=resteasy-jackson&amp;amp;e=kubernetes&amp;amp;e=container-image-jib&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.quarkus.io/?e=org.kie.kogito%3Akogito-quarkus-decisions&amp;amp;amp;e=resteasy-jackson&amp;amp;amp;e=kubernetes&amp;amp;amp;e=container-image-jib&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.quarkus.io/?e=org.kie.kogito%3Akogito-quarkus-decisions&amp;amp;amp;amp;e=resteasy-jackson&amp;amp;amp;amp;e=kubernetes&amp;amp;amp;amp;e=container-image-jib&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.quarkus.io/?e=org.kie.kogito%3Akogito-quarkus-decisions&amp;amp;amp;amp;amp;e=resteasy-jackson&amp;amp;amp;amp;amp;e=kubernetes&amp;amp;amp;amp;amp;e=container-image-jib&quot;&gt;https://code.quarkus.io/?e=org.kie.kogito%3Akogito-quarkus-decisions&amp;amp;amp;amp;amp;e=resteasy-jackson&amp;amp;amp;amp;amp;e=kubernetes&amp;amp;amp;amp;amp;e=container-image-jib&lt;/a&gt;&lt;/p&gt;   
&lt;p&gt;The link will automatically populate for you the basic extensions needed to follow this tutorial.&lt;/p&gt;   
&lt;h2&gt;Step 2: maintain configuration&lt;/h2&gt;   
&lt;p&gt;In the &lt;code&gt;application.properties&lt;/code&gt; file, you need to maintain a couple of required configuration, following this guideline:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;quarkus.kubernetes.deployment-target=knative
    
    quarkus.container-image.registry=quay.io
    quarkus.container-image.group=&amp;lt;your own account&amp;gt;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;You may decide for the Container Image Registry to opt instead for &lt;code&gt;docker.io&lt;/code&gt; or similar, and you will need to configure &lt;a href=&quot;https://quarkus.io/guides/container-image#container-image-options&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;your own account credentials&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Step 3: deploy your Drools serverless app 🚀&lt;/h2&gt;   
&lt;p&gt;To deploy on Kubernetes, my preference is to deliberately publish a Container Image on a Registry; to follow this strategy, you just need to issue a couple of commands on the terminal.&lt;/p&gt;   
&lt;p&gt;The first command will produce a Container Image for our Drools serverless application, and publish it on the Registry:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;mvn clean package -Dquarkus.container-image.push=true&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;Then, the second command will effectively deploy that image on the OpenShift cluster:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;kubectl apply -f target/kubernetes/knative.yml&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;Thanks to Knative, we have autoscaling including autoscale-to-zero, as it&apos;s shown in the video!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/08/Shotcut_00_06_05_900-1024x576.png&quot; alt=&quot;Autoscale to zero in action on the Drools serverless app&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption class=&quot;wp-element-caption&quot;&gt;
    Autoscale to zero in action, for the Drools serverless app 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Note: if you are using Windows PowerShell, don&apos;t forget to properly escape the commands, for instance on PowerShell:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;mvn clean package &quot;-Dquarkus.container-image.push=true&quot;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;You can pause the video linked above, to follow step-by-step the commands using Windows ;)&lt;/p&gt;   
&lt;h2&gt;Bonus: Swagger UI OpenAPI&lt;/h2&gt;   
&lt;p&gt;If you want to use Swagger UI and the OpenAPI web based GUI in your deployed app, simply add &lt;code&gt;quarkus-smallrye-openapi&lt;/code&gt; in the &lt;a href=&quot;#step1&quot;&gt;extensions from step1&lt;/a&gt;, and then maintain the &lt;code&gt;application.properties&lt;/code&gt; configuration:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;quarkus.swagger-ui.always-include=true&lt;/code&gt;&lt;/pre&gt;   
&lt;h2&gt;Want to learn more?&lt;/h2&gt;   
&lt;p&gt;We hope you enjoyed this lighthearted tutorial 😄&lt;/p&gt;   
&lt;p&gt;Did you know that formal training is available from Red Hat? &lt;a href=&quot;https://www.redhat.com/en/services/training/do244-developing-applications-with-red-hat-openshift-serverless-and-knative&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Developing Applications with Red Hat OpenShift Serverless and Knative (DO244)&lt;/a&gt; teaches you how to develop, deploy, and auto-scale event driven serverless applications on the Red Hat OpenShift Container Platform. Read the course page to &lt;a href=&quot;https://www.redhat.com/en/services/training/do244-developing-applications-with-red-hat-openshift-serverless-and-knative&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;learn more&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;We have create a simple Drools serverless app with just 3 steps thanks to Kogito and Quarkus; then, thanks to OpenShift Serverless based on Kubernetes and Knative capabilities, we have autoscaling applied, including scale-to-zero.&lt;/p&gt;   
&lt;p&gt;You can use your own Kubernetes cluster while following this tutorial, but don&apos;t forget you can use a free &lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;OpenShift Sandbox&lt;/a&gt; to replicate all the steps exactly as shown in the video!&lt;/p&gt;   
&lt;p&gt;If you enjoyed this simple tutorial, you might be also interested to read this other guide on using the Drools for content based routing on Kafka, using Quarkus and &lt;a href=&quot;https://camel.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Apache Camel&lt;/a&gt; too! Check it out &lt;a href=&quot;https://blog.kie.org/2022/03/content-based-routing-with-quarkus-and-kogito.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;Looking for additional content on Knative serverless function? Check out this &lt;a href=&quot;https://blog.kie.org/2022/09/creating-your-first-cloud-agnostic-serverless-application-with-java.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;new blog post&lt;/a&gt;!&lt;/p&gt;   
&lt;p&gt;Questions?&lt;br&gt;Let us know your feedback by leaving a comment below! 👋&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Integrating Drools DMN Engine with IBM Open Prediction Service</title>
      <link>https://matteomortari.com/blog/2022/integrating-drools-dmn-engine-with-ibm-open-prediction-service.html</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/integrating-drools-dmn-engine-with-ibm-open-prediction-service.html</guid>
      	<description>
	&lt;p&gt;In this blog post we&apos;re going to explore an integration between the &lt;a href=&quot;https://www.drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Drools DMN Engine&lt;/a&gt; and another open source project from IBM: &quot;&lt;a href=&quot;https://github.com/IBM/open-prediction-service-hub#readme&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Open Prediction Service&lt;/a&gt;&quot; (OPS).&lt;/p&gt;   
&lt;h2&gt;Introduction&lt;/h2&gt;   
&lt;p&gt;Integrating symbolic AIs (rule engines, KRR, etc) with Machine Learning predictive models is an effective strategy to achieve pragmatical, and often more eXplainable, AI solutions.&lt;/p&gt;   
&lt;p&gt;We have also reiterated on this very powerful message across several conferences:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.10.21-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;For the most recent examples, you can reference &lt;a href=&quot;https://www.youtube.com/watch?v=VK99kmwdb_Y&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DecisionCamp&lt;/a&gt; or the &lt;a href=&quot;https://odsc.com/speakers/54619/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Open Data Science Conference&lt;/a&gt;, or the &lt;a href=&quot;https://www.youtube.com/watch?v=eVQfGtyDrY8&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;All Things Open&lt;/a&gt; presentations.&lt;/p&gt;   
&lt;p&gt;This is the reason why we believe the &lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;integration&lt;/span&gt;&lt;/strong&gt; between Predictive Models (such as ML or PMML-based solutions) and Decision Models is very, very important.&lt;/p&gt;   
&lt;p&gt;In this context, we will explore how to integrate the Drools DMN Engine with IBM&apos;s Open Prediction Service hub, to achieve a pragmatic AI solution:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.18.11-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The Open Prediction Service offers us a broker mechanism between several backends for ML evaluation of Predictive Models.&lt;/p&gt;   
&lt;h2&gt;Building the demo&lt;/h2&gt;   
&lt;p&gt;In today&apos;s demo, we will develop a simple loan &quot;fast-track&quot; approval service, based on both a Predictive Model to estimate the Risk Score, and a Decision Table in DMN to apply a business policy.&lt;/p&gt;   
&lt;p&gt;For the Risk Score prediction, you can reference &lt;a href=&quot;https://github.com/IBM/open-prediction-service-hub/tree/main/ops-implementations/ads-ml-service#readme&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;this example&lt;/a&gt; on the IBM OPS repository.&lt;/p&gt;   
&lt;p&gt;Using the documentation, also available as Swagger / OpenAPI descriptor, we can identify the Predictive Model input features and output scoring.&lt;/p&gt;   
&lt;p&gt;Now we understand we will need to supply:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;the Credit score&lt;/li&gt;
 &lt;li&gt;the Income&lt;/li&gt;
 &lt;li&gt;the Loan Amount requested&lt;/li&gt;
 &lt;li&gt;the number of instalments&lt;/li&gt;
 &lt;li&gt;and the Rate&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;As output, we can &lt;em&gt;reference the second predictor&lt;/em&gt; as a measure of Risk Score in our Decision Model.&lt;/p&gt;   
&lt;p&gt;We can integrate the ML predictive model inside our DMN model to implement the loan &quot;fast-track&quot; approval as usual by defining a BKM node:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.43.20-1.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Then, we can define a Decision Table implementing the business policy for the &quot;fast-track&quot; mechanism:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/image-5.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We have completed our modeling activities with DMN and the Predictive Model served via OPS.&lt;/p&gt;   
&lt;h2&gt;Invoking the OPS service&lt;/h2&gt;   
&lt;p&gt;On the more technical side, to actually integrate OPS evaluation we can follow two options.&lt;/p&gt;   
&lt;p&gt;The first solution could be to use the Quarkus&apos; RESTEasy client capabilities. &lt;/p&gt;   
&lt;p&gt;For this demo, it&apos;s enough to define the interface of the service:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;@Path(&quot;/predictions&quot;)
@RegisterRestClient
public interface OPSClient {

    @POST
    OPSResponse predictions(OPSRequest request);
}&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;You can explore the complete code by referencing the repo of the demo &lt;a href=&quot;https://github.com/tarilabs/demo20220330/tree/ecb2bd7fde8e3d459e86528345560ff94f39f769&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;at this commit&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;Then, you just need to configure the actual URL for the OPS, for example:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;# Connect to OPS Server
# on quarkus:dev, we use a local Docker run:
%dev.quarkus.http.port=0
%dev.org.acme.demo20220330.OPSClient/mp-rest/url=http://localhost:8080

# as default, we are using an app deployed on OpenShift:
org.acme.demo20220330.OPSClient/mp-rest/url=https://{your sandbox}.openshiftapps.com&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;You can reference to &lt;a href=&quot;https://quarkus.io/guides/rest-client&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;this Quarkus guide&lt;/a&gt;, for more details about implementing a REST client with Quarkus.&lt;/p&gt;   
&lt;h2&gt;Invoking OPS using the Java client SDK&lt;/h2&gt;   
&lt;p&gt;As a next step, we can replace the RESTEasy client, with the SDK offered by the OPS itself.&lt;/p&gt;   
&lt;p&gt;In this case, it will be enough to reference the dependency in the Maven pom.xml:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.ibm.decision&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;ops-client-sdk&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;Then, we can just replace the RESTEasy client with the OPS&apos; RunApi, for example:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;RunApi api = new RunApi();
Prediction prediction = new Prediction();
// ...
prediction.setParameters(Arrays.asList(
    param(&quot;creditScore&quot;, creditScore),
    param(&quot;income&quot;, income),
    param(&quot;loanAmount&quot;, loanAmount),
    param(&quot;monthDuration&quot;, monthDuration),
    param(&quot;rate&quot;, rate)
));
PredictionResponse result = api.prediction(prediction);&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;You can explore the complete code by referencing the repo of the demo &lt;a href=&quot;https://github.com/tarilabs/demo20220330/tree/8698337c70251961f5800445c2cd03dea26b5bae&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;at this commit&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Running the demo&lt;/h2&gt;   
&lt;p&gt;We will run the demo on the Red Hat Developer OpenShift Sandbox. Remember you can &lt;a href=&quot;https://developers.redhat.com/developer-sandbox/get-started&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;apply for a free account yourself&lt;/a&gt;. The free account has some limitations, but they will not block you in replicate this complete solution!&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/image-6-1024x601.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;As you can see in the picture, first I have deployed the OPS demo on the sandbox (left).&lt;/p&gt;   
&lt;p&gt;Then, I&apos;ve deployed the DMN demo explained in this post, as a Kogito-based application (right).&lt;/p&gt;   
&lt;p&gt;Then, we will have access to the Swagger OpenAPI code generated by the DMN extension of Kogito:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/image-8-1024x601.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;As you can see, the REST API is automatically generated for the InputData nodes as defined by the DMN model (Prospect and Loan).&lt;/p&gt;   
&lt;p&gt;Finally, to exercise the demo, we can make use of the automatically generated forms, based on the Swagger OpenAPI:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-21.45.17-1024x591.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this case, as we would expect, the total amount would not classify for the fast-track.&lt;/p&gt;   
&lt;p&gt;Then, we can exercise for a different amount value:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-21.47.22-1024x601.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this case, beyond the expected improvement in the Risk Score prediction from the ML model, we classify for a &quot;fasttrack&quot; as the policy in the Decision Table prescribes.&lt;/p&gt;   
&lt;p&gt;You can play with different values, showing how the Risk Score prediction is being affected and causing a different final decision.&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;In this post, we have explored integrating a Decision Model using DMN with a ML predictive model. Machine Learning and Decision Models together can provide a pragmatic, and eXplainable, AI solution.&lt;/p&gt;   
&lt;p&gt;Specifically, we have explored integrating the Drools DMN Engine with IBM Open Prediction Service. The advantage of this integration comes from the capability of OPS to interact with several ML providers!&lt;/p&gt;   
&lt;p&gt;Finally, we have deployed the complete demo on the OpenShift Sandbox.&lt;/p&gt;   
&lt;p&gt;What do you think of this integration demo?&lt;br&gt;Questions?&lt;/p&gt;   
&lt;p&gt;Let us know in the comments below!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Using JavaScript and Power Fx with DMN</title>
      <link>https://matteomortari.com/blog/2022/using-javascript-and-power-fx-with-dmn.html</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/using-javascript-and-power-fx-with-dmn.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/watch?v=-5VcMF40o_U&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;In this short update, I want to share with you about an &lt;em&gt;experimental&lt;/em&gt; feature to leverage the extensibility of the DMN specification to evaluate expressions using a plurality of expression languages, such as JavaScript, &lt;a href=&quot;https://github.com/microsoft/Power-Fx&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Power Fx&lt;/a&gt;, and potentially many more!&lt;/p&gt;   
&lt;p&gt;For the running example in this post, let&apos;s use the Body Mass Index (BMI) calculation described in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Body_mass_index&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Wikipedia page&lt;/a&gt;:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img class=&quot;figure-img img-fluid&quot; src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/CodeCogsEqn-2.png&quot; alt=&quot;&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We can classify the result of the calculation, based on a standard Decision Table:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img class=&quot;figure-img img-fluid&quot; src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-7.png&quot; alt=&quot;&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The decision table has been simplified if compared to the original article from Wikipedia, but that&apos;s irrelevant for the scope of this example.&lt;/p&gt;   
&lt;p&gt;The overall DRG of the DMN model looks like this:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img class=&quot;figure-img img-fluid&quot; src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-8.png&quot; alt=&quot;&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;As we expect, &quot;Mass&quot; and &quot;Height&quot; are the InputDatas of the model; then we calculate the BMI with a first Decision node. Finally, we classify the calculated BMI value, accordingly to the Decision Table above.&lt;/p&gt;   
&lt;p&gt;The last step is to provide the expression for the &quot;Calculate BMI&quot; decision node.&lt;/p&gt;   
&lt;p&gt;For example, using Power Fx idioms:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img class=&quot;figure-img img-fluid&quot; src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-9-1024x504.png&quot; alt=&quot;&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;It would result in this final expression for the &quot;Calculate BMI&quot; decision node:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img class=&quot;figure-img img-fluid&quot; src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-10-1024x416.png&quot; alt=&quot;&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this case, the resulting DMN model evaluates using two expression languages: Power Fx for the first Decision, and the default (FEEL) for the Decision Table.&lt;/p&gt;   
&lt;p&gt;For another example, we could use idiomatic JavaScript:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img class=&quot;figure-img img-fluid&quot; src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/Screenshot-2022-03-24-at-16.03.49-1024x396.png&quot; alt=&quot;&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this second case, the resulting DMN model evaluates using two expression languages: JavaScript for the first Decision, and again FEEL for the Decision Table.&lt;/p&gt;   
&lt;h2&gt;Running the demo&lt;/h2&gt;   
&lt;p&gt;We can now run the Kogito application.&lt;/p&gt;   
&lt;p&gt;To demonstrate the BMI calculation, we naturally keep using the Swagger GUI:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img class=&quot;figure-img img-fluid&quot; src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/Screenshot-2022-03-24-at-16.12.46-1024x877.png&quot; alt=&quot;&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;If you are already accustomed in using DMN models with Kogito, you will have noticed there is basically no different in the way this system behaves from an external point of view.&lt;/p&gt;   
&lt;p&gt;This is what we expect!&lt;/p&gt;   
&lt;p&gt;We have now defined two DMN models, using a plurality of expression languages. However, our goal is to model our &lt;em&gt;decision services &lt;/em&gt;in the most convenient and effective way possible. In this case, for example, we have used Power Fx, or JavaScript for some calculations.&lt;/p&gt;   
&lt;p&gt;The code of this demo for the curious, is available &lt;a href=&quot;https://github.com/tarilabs/dmn-js-powerfx-demo&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;Don&apos;t forget to check out the video linked above, for a live demonstration of this experimental capability!&lt;/p&gt;   
&lt;p&gt;In this post, we have leveraged the extensibility of the DMN specification, in order to evaluate expressions using a plurality of expression languages. We have just used JavaScript and Power Fx with DMN!&lt;/p&gt;   
&lt;p&gt;Questions?&lt;br&gt;Feedback?&lt;br&gt;Don&apos;t hesitate to let us know!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Content Based Routing with Quarkus and Kogito</title>
      <link>https://matteomortari.com/blog/2022/content-based-routing-with-quarkus-and-kogito.html</link>
      <pubDate>Wed, 9 Mar 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/content-based-routing-with-quarkus-and-kogito.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/nXyKM-xds2M&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;This is a second iteration of a &lt;a href=&quot;https://blog.kie.org/2021/06/intelligent-kafka-message-routing-using-drools-dmn-engine-and-apache-camel.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;previous post&lt;/a&gt;, where we implemented EIP patterns using just Drools and Apache Camel.&lt;/p&gt;   
&lt;p&gt;In this post instead, I want to share with you how to implement a complete, end-to-end &lt;strong&gt;Content Based Routing&lt;/strong&gt; solution using &lt;a href=&quot;https://quarkus.io/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Quarkus&lt;/a&gt; as a developer platform, including: &lt;a href=&quot;https://www.drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Drools DMN Engine&lt;/a&gt;, &lt;a href=&quot;https://kogito.kie.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Kogito&lt;/a&gt;, &lt;a href=&quot;https://camel.apache.org/#apache-camel-projects&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Apache Camel&lt;/a&gt;, &lt;a href=&quot;https://www.atlasmap.io/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;AtlasMap&lt;/a&gt; and Apache Kafka as our message broker.&lt;/p&gt;   
&lt;p&gt;I will make use of a &lt;strong&gt;Managed Service&lt;/strong&gt; offering for Kafka, which you can try for free yourself too, by using this link: &lt;a href=&quot;https://red.ht/trykafka&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://red.ht/trykafka&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://red.ht/trykafka&quot;&gt;https://red.ht/trykafka&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;I will also make use of the Red Hat Developer &lt;strong&gt;OpenShift Sandbox&lt;/strong&gt; to deploy the application; you can try for free yourself by using this link: &lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;https://developers.redhat.com/developer-sandbox&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Content based routing overview&lt;/h2&gt;   
&lt;p&gt;Here is the revised Enterprise Integration Pattern diagram of the flow, with the new components:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-1024x431.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption&gt;
    EIP Diagram of the Content Based Routing application 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The application keep the focus on routing healthcare-related messages; for this demo example, messages are routed accordingly to the following decision table rules:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-1.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption&gt;
    Message Routing rules in a DMN decision table 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The table above describes the rules of message routing in terms of the (business) domain model:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;the sending application&lt;/li&gt;
 &lt;li&gt;the type of message&lt;/li&gt;
 &lt;li&gt;the type of event&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;For the purpose of this demo, the examples are provided using HL7v2 as the &lt;strong&gt;technical format&lt;/strong&gt; for the message payload. You can read more about HL7v2 on the &lt;a href=&quot;http://www.hl7.org/implement/standards/product_brief.cfm?product_id=185&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;HL7 website&lt;/a&gt; and on this &lt;a href=&quot;https://cloud.google.com/healthcare-api/docs/concepts/hl7v2&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;tutorial page&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;In order to properly translate from the specific technical format HL7v2 into the domain model, we can make use of the AtlasMap capabilities of data-mapping. This allows the stakeholder involved in the content based routing application to more easily inspect and describe the rules, for instance. Here is a visual summary of the AltasMap intent combined with the DMN decision table:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-2-1024x497.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption&gt;
    Using AltasMap in combination with a DMN decision table 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In a &lt;a href=&quot;https://blog.kie.org/2022/01/data-enrichment-use-case-with-dmn-and-bpmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;separate post&lt;/a&gt; about data enhancement, I hinted at combining the capabilities of AltasMap with DMN; I hope this tutorial now provides a very pragmatic example!&lt;/p&gt;   
&lt;h2&gt;Technical details&lt;/h2&gt;   
&lt;p&gt;In this section, I want to highlight how the &lt;a href=&quot;https://camel.apache.org/manual/dsl.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Camel DSL&lt;/a&gt; allows to implement the EIP pattern very easily:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;from(&quot;direct:hl7&quot;)
        .enrich(&quot;direct:label&quot;, aggregationStrategy)
        .to(&quot;log:org.drools.demo?level=DEBUG&amp;amp;showAll=true&amp;amp;multiline=true&quot;)
        .routingSlip(header(&quot;whereTo&quot;))
        .transform(HL7.ack())
        ;
    
    from(&quot;direct:label&quot;)
        .unmarshal().hl7()
        .to(&quot;atlasmap:atlasmap-mapping.adm&quot;).unmarshal().json()
        .process(kogitoDMNEvaluate) // &amp;lt;== Rules as DMN decisions 
        .setHeader(&quot;topicsHeader&quot;, simple(&quot;${body[topic names]}&quot;))
    ;&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;As you can see, that&apos;s all needed in order to implement the Enterprise Integration Pattern in a Quarkus application, and integrate it with AltasMap and Kogito. You can access the source code at this git repository: &lt;a href=&quot;https://github.com/tarilabs/quarkus-content-based-routing&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tarilabs/quarkus-content-based-routing&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tarilabs/quarkus-content-based-routing&quot;&gt;https://github.com/tarilabs/quarkus-content-based-routing&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Deployment&lt;/h2&gt;   
&lt;p&gt;After setting up the Managed Kafka and OpenShift Sandbox accounts using the links provided above, the deployment is pretty straightforward.&lt;/p&gt;   
&lt;p&gt;First, we create the intended Kafka topics on the Managed Kafka console.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-3-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption&gt;
    Creating the topic (queues) in the Managed Kafka 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Second, we deploy the content based routing Quarkus application using the OpenShift console.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-4-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption&gt;
    The content based routing application now deployed on OpenShift 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Don&apos;t forget you can easily recreate the same setup yourself and for free, by using the links provided earlier in this post. For instance, I used the very same links myself in order to make sure the demo worked fine using free resources only.&lt;/p&gt;   
&lt;p&gt;Finally, the deployment and setup is complete, and we can start to make use of our content based routing solution, by sending REST calls to the ingress endpoint; this can be used as a classic webhook or analogous to a &lt;a href=&quot;https://cds-hooks.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;CDS hook&lt;/a&gt;.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2022/03/image-5-1024x577.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
  &lt;figcaption&gt;
    Invoking the REST API with an EDI message payload in HL7v2 format, and it is routed to the correct queue 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;To see a demonstration of this setup in action, don&apos;t forget to check out the video linked at the beginning of this post! For example, the video shows the application responding live to the incoming messages in order to route them to the expected Kafka topic.&lt;/p&gt;   
&lt;p&gt;Finally, I hope this article is helpful to you as a pragmatic example on how to implement a complete content based routing solution using Quarkus, Drools DMN and Apache Camel.&lt;/p&gt;   
&lt;p&gt;Feedback?&lt;br&gt;Questions?&lt;br&gt;Don&apos;t hesitate to let us know!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Data enrichment use-case with DMN and BPMN</title>
      <link>https://matteomortari.com/blog/2022/data-enrichment-use-case-with-dmn-and-bpmn.html</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/data-enrichment-use-case-with-dmn-and-bpmn.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/NHigoAz1TRY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;In this post I want to share an interesting use case of data enrichment, using DMN with BPMN and other open standards.&lt;/p&gt;   
&lt;p&gt;The typical usage pattern for data enrichment is the following: a complex data structure containing several attributes is provided as input; based on some computations and decision results, the original structure is enriched with &lt;em&gt;additional&lt;/em&gt; attributes. In an even more complex scenario, already existing specific attributes are overridden with new values.&lt;/p&gt;   
&lt;p&gt;Often this usage pattern is referred to as “mutability”, but speaking about mutability is an improper terminology to be used in the context of DMN; DMN is stateless and mandates that “&lt;em&gt;all decision logic is free of side-effects&lt;/em&gt;” (DMN Specification chapter 5.2.3) among other idempotent and deterministic requirements.&lt;/p&gt;   
&lt;p&gt;Instead a more important aspect to focus on, while considering this use-case, is that Functional Programming has taught us powerful lessons which can be applied in this context: we can achieve the desired goal by pushing side-effects at the boundaries, or by adopting other FP strategies.&lt;/p&gt;   
&lt;p&gt;In this post we will see how we don’t strictly need mutability features, in order to effectively achieve data enrichment.&lt;/p&gt;   
&lt;p&gt;I will demonstrate the pragmatic implementation of this use-case, both by using DMN as a standalone knowledge asset, as well as combining the same DMN model with a BPMN process.&lt;/p&gt;   
&lt;h2&gt;Introduction&lt;/h2&gt;   
&lt;p&gt;For the remainder of this post, we will use a running example where the fundamental Domain Model is a structure dealing with an incoming request of Tech Support.&lt;/p&gt;   
&lt;p&gt;This can be represented as a DMN ItemDefinition, shown in the screenshot below; we can also use the idiomatic Java Pojo representation, following the Kie v7 conventions:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/0R0kXRu9Uc80Wrg16a4a7AAu9wzsx56I3z4cQnbWj1lW2vE8qZcJihLkwIZ8BYDtGMlpKtYFUsOmV7m6umqQaClejI9-8Gj7APF8orjnGHoTg6aCkh15HPq6lle2kpWANvzeV5vP&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;For this example, we can notice most attributes are pertaining to the event of the support request being raised:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;  &quot;Support Request&quot; : {
        &quot;full name&quot; : &quot;John Doe&quot;,
        &quot;email&quot; : &quot;info@redhat.com&quot;,
        &quot;mobile&quot; : &quot;+1&quot;,
        &quot;mailing address&quot; : &quot;somewhere&quot;,
        &quot;account&quot; : &quot;47&quot;,
        &quot;premium&quot; : false,
        &quot;area&quot; : &quot;tech&quot;,
        &quot;description&quot; : &quot;app crashed&quot;
      }&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;all except for the &lt;strong&gt;priority&lt;/strong&gt; attribute.&lt;/p&gt;   
&lt;p&gt;The goal of the business application is to process the support request, establish the appropriate priority level, and then produce a support request with the priority attribute now correctly valorized.&lt;/p&gt;   
&lt;p&gt;While looking in details at this example, I will keep the decision logic simple and we will &lt;strong&gt;not&lt;/strong&gt; use any complex decision logic to actually determine the priority value; as mentioned, the focus of this post is the processing of the incoming payload, to produce a fully valorized support request, also including the actual priority value.&lt;/p&gt;   
&lt;h2&gt;Strategy A: combine DMN with BPMN&lt;/h2&gt;   
&lt;p&gt;A first approach is to combine DMN and BPMN for the best of both worlds: DMN should focus on the decision logic keeping an immutable and stateless approach, while BPMN is used to manage in a stateful manner the different stages of processing for the support request.&lt;/p&gt;   
&lt;p&gt;The DMN model can focus on the decision logic to establish the appropriate Priority value, depending on the content of the incoming support request:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/v7pwBDYpuoEJJyVTa9eyv3apX0mafRB0-CUVhPE18sSAJ597vwTexvbsyAK4gBINSj2HXuf4Qk69qEVqXfl8MY5LFVu2DZihuQs_XgkfvAalk33Un411CHHFP6Exc7M5wNxjh2zk&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The current decision logic in the example right now is quite simplistic because as mentioned is not the most important aspect, but naturally can be further extended to have a more complex decision table, etc:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh3.googleusercontent.com/1uy8Qy-mezgcZfoF6xBeZI26G1L5aLSCjFD4Z3B6US9K49UCi0qyBc-fz3IC_bgMVvWWtOWRT8n2Xokns12wojnp6iDgSuusE3W9IlnuwVdc1xQElh_ZCm-iJoTD3eV1j-Xs471b&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Now we need to have as output almost the ~same structure we have received as input, and override it with the combination of the key-value pair for Priority, having value either “High” or “Medium”.&lt;/p&gt;   
&lt;p&gt;We can use for this goal a BPMN process:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/Lu7JshhQCdxnFTmTmaaKylje3wF5a-xQ0lssHZ7Poxt_saxEAvsWNMccYDoLe1xo_clLTXvnJ4rT9H3QfE2G4m558fnCdY0aKAc1SGJHIux-LjvvdKmPRdL4qad1eFS3aCLaEYQp&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The process is started by receiving as input the support request payload, stored as a process variable named “request”.&lt;/p&gt;   
&lt;p&gt;The first BPMN Task, named “Process Support Request”, is in charge of:&lt;/p&gt;   
&lt;ol&gt; 
 &lt;li&gt;Invoke the evaluation of the DMN model, passing the incoming support request (the “request” process variable) as input of the DMN evaluation.&lt;/li&gt; 
 &lt;li&gt;Take the output decision of the DMN evaluation, “Determine Priority”, and assign it to a temporary process variable called “priority”.&lt;/li&gt; 
 &lt;li&gt;Modify the “request” process variable, with the value now contained in the “priority” from step2.&lt;/li&gt; 
&lt;/ol&gt;   
&lt;p&gt;You can find more details about these three steps of the “Process Support Request” Task in the next section.&lt;/p&gt;   
&lt;p&gt;Later, the “request” process variable is will be fully valorized as well in the priority attribute, so that can be used in the gateway, as one would naturally expect:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/EhbbWa1gfS-vPA9Vm40Vj1_HZM9Z3smfqtv5ZCXXCp1_0aYcSj4nH1CyIQxTTpbP5Ng_e_eJkWxQEkDj5o_0CT_Wis1rqE6Kc-7Isu7e2DAj0K4-cteEAwLZTLc5bGWepyrr3acy&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;This has achieved the original requirements.&lt;/p&gt;   
&lt;h3&gt;Details&lt;/h3&gt;   
&lt;p&gt;The final step 3 of the “Process Support Request” BPMN Task in effect mutates the original structure; however, it is important to be noted that the &lt;em&gt;mutation&lt;/em&gt; happens indeed in the context of a BPMN process, which naturally allows for statefulness, mutations, side-effects, etc.&lt;/p&gt;   
&lt;p&gt;In this strategy, we have kept the DMN model fully focused on the actual decision, that is the determination of the &lt;strong&gt;priority&lt;/strong&gt; for the given support request.&lt;/p&gt;   
&lt;p&gt;Currently this is implemented on jBPM Kie v7 with the three steps described above, meaning it can be achieved already today by:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Input “Support Request” &amp;lt;- request (process variable)
    Output “Determine Priority” -&amp;gt; priority (process variable)&lt;/code&gt;&lt;/pre&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh4.googleusercontent.com/YvWMp_9rYsu7oxUUiGbcj2mXChF7QJiWcIGc6wC0--jRbV1Ijoy-PkvkiQF6CMVOboSesEVDIcJOLFvqOzcbNJ9_ZV_MLMq_-PN-7qcazE2cDojsGpfg-SvKgxhr9v-gC3lpCYfA&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;Please notice in the screenshot both the assignment in the foreground to a temporary process variable name “priority” (step2) and in the background the modification of the support request in the attribute “priority” using the On Exit Action script (step3).&lt;/p&gt;   
&lt;p&gt;Step2 and Step3 of the “Process Support Request” Task, &lt;em&gt;in the future&lt;/em&gt;, could be combined in the Data Assignment, directly in the Task’s “Data I/O”, when support for expressions will be fully implemented.&lt;/p&gt;   
&lt;p&gt;Something that &lt;em&gt;could&lt;/em&gt; potentially look like this:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Input “Support Request” &amp;lt;- request (process variable)
    Output “Determine Priority” -&amp;gt; ${request.priority} (expression)&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;Support for expressions is currently being discussed for FEEL in future iterations and might achieve something similar.&lt;/p&gt;   
&lt;h2&gt;Strategy B: using DMN standalone&lt;/h2&gt;   
&lt;p&gt;Another approach is to use DMN only; in this case we cannot modify the original InputData value, but we can definitely create an exact copy of the input payload structure but altered only on the desired attribute “priority”.&lt;/p&gt;   
&lt;p&gt;&lt;strong&gt;Naturally we want to do this without having to replicate manually all the original attributes&lt;/strong&gt;, which would be extremely tedious!&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;NOTE: this approach is still fully compliant with the DMN Specification semantics, meaning free of side-effects and stateless.&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;We introduce a new built-in function called “&lt;kbd&gt;context put&lt;/kbd&gt;”: this function takes 3 parameters:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;“context” of type context (a composite structure in DMN terms)&lt;/li&gt; 
 &lt;li&gt;“key” of type string&lt;/li&gt; 
 &lt;li&gt;“value” of Any type&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;and produces a resulting context altered in the key-value pair, or enriched of the new key-value pair.&lt;/p&gt;   
&lt;p&gt;For example:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;context put({ name: &quot;John Doe&quot; }, &quot;age&quot;, 47)&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;would result in:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{ name: &quot;John Doe&quot;, age: 47 }&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;You might have some ideas by now about where this is about to go :)&lt;/p&gt;   
&lt;p&gt;We can achieve something similar to:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;context put( &amp;lt;request&amp;gt; , &quot;priority&quot;, ... )&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;This in fact it is pretty easy, by taking the previous DMN model and adding just one more Decision to keep the clarity of the decision logics in the DRG:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh4.googleusercontent.com/vvnpuywq4ZfEkgZ5-ezd4pHeoVFSgSAQS6ic1xa4-8imlp7bNjxXoyNKf7dJS560nr0D0Jhnqfq1cVBeaHfsyJXfnKgZhsx06QXG7jA7C_FLEHzC7BaWUPqDyEB3AY2wxOXFURKx&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;In this DRD picture I’ve used the same colour to highlight both nodes “Support Request” and “Processed Request” having the same typeRef, meaning both nodes conform to the ItemDefinition “tSupportRequest” originally shown at the beginning of this post.&lt;/p&gt;   
&lt;p&gt;The decision logic for “Processed Request” is super simple, meaning:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh4.googleusercontent.com/W184VO4jLBmuoQRjS8zIgMlC9-kSBfVGdkZbdEmIwFJ7k1IWEzk9EaWVx9ZJf5JnphM4h4K2X6s7ZcB-DLAfD4VMl6ZapvZDYuIVuEMYieJcBVviPnZUGbxSAtxGTal4WQ-SHT5V&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;As we have learnt, that means: produce the same structure of the node “Support Request” but altered (or appended) with a new key-value pair, having key “priority” and having value from the “Determine Priority” sub-decision.&lt;/p&gt;   
&lt;p&gt;So we have achieved the same goal, following another strategy now; we have as output Decision the same structure we see in one of the InputData, but valorized in the new “priority” attribute value!&lt;/p&gt;   
&lt;p&gt;This would also work in a totally equivalent BPMN process too:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/dS6l_gotFEabCrYVRmwll6o34yCCvhJ8cqS1OdyULs56Nscgaf9tACCWgtWSEJ6HV_3J__2Wy-ayEvpLMenLUbfjmmQPTXEV_obMiP6OA696cONTwa186mFYIMf6UrlTy8GclUYx&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;This BPMN process is now simpler in the Task&apos;s Data I/O Assignments, as we no longer need the previously required Step2+Step3.&lt;/p&gt;   
&lt;p&gt;The BPMN &quot;Process Support Request&quot; Task now simply uses:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Input “Support Request” &amp;lt;- request (process variable)
    Output “Processed Request” -&amp;gt; request (process variable)&lt;/code&gt;&lt;/pre&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/Fzk0x1YW38HL6cYgz3R5U1wYnuf7SKgaI2K3avmFowanngvfzJgLFBEHbVpyQFwB6Bb1xFsczQUcVZIEevZfFxV-biYCEalocS_JwQBF1kdfj3ShniE8o3C3VDS7aXvI_fIgwW1F&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;This works perfectly thanks to the awesome contributions by Anton Giertli clarifying requirements and work by Enrique Gonzalez Martinez with &lt;a href=&quot;https://issues.redhat.com/browse/JBPM-9783&quot;&gt;JBPM-9783&lt;/a&gt;, allowing a better integration of the DMN results with the jBPM’s BRE Task!&amp;nbsp;&lt;/p&gt;   
&lt;h3&gt;Details&lt;/h3&gt;   
&lt;p&gt;Adopting the same JSON originally presented at the beginning of this post, we can use that as a DMN input payload and check the results using this DMN model alone.&lt;/p&gt;   
&lt;p&gt;DMNContext of INPUT:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{
      &quot;Support Request&quot; : {
        &quot;account&quot; : &quot;47&quot;,
        &quot;email&quot; : &quot;info@redhat.com&quot;,
        &quot;mobile&quot; : &quot;+1&quot;,
        &quot;premium&quot; : false,
        &quot;area&quot; : &quot;tech&quot;,
        &quot;description&quot; : &quot;app crashed&quot;,
        &quot;priority&quot; : null,
        &quot;full name&quot; : &quot;John Doe&quot;,
        &quot;mailing address&quot; : &quot;somewhere&quot;
      }
    }&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;DMNResult of OUTPUT:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{
      &quot;Support Request&quot; : {
        &quot;account&quot; : &quot;47&quot;,
        &quot;email&quot; : &quot;info@redhat.com&quot;,
        &quot;mobile&quot; : &quot;+1&quot;,
        &quot;premium&quot; : false,
        &quot;area&quot; : &quot;tech&quot;,
        &quot;description&quot; : &quot;app crashed&quot;,
        &quot;priority&quot; : null,
        &quot;full name&quot; : &quot;John Doe&quot;,
        &quot;mailing address&quot; : &quot;somewhere&quot;
      },
      &quot;Determine Priority&quot; : &quot;Medium&quot;,
      &quot;Processed Request&quot; : {
        &quot;area&quot; : &quot;tech&quot;,
        &quot;premium&quot; : false,
        &quot;mobile&quot; : &quot;+1&quot;,
        &quot;description&quot; : &quot;app crashed&quot;,
        &quot;mailing address&quot; : &quot;somewhere&quot;,
        &quot;full name&quot; : &quot;John Doe&quot;,
        &lt;strong&gt;&quot;priority&quot; : &quot;Medium&quot;&lt;/strong&gt;,
        &quot;account&quot; : &quot;47&quot;,
        &quot;email&quot; : &quot;info@redhat.com&quot;
      }
    }&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;This &quot;&lt;kbd&gt;context put&lt;/kbd&gt;&quot; function is not part of the DMN v1.3 specification, so at the time of writing this is to be considered an experimental and extended built-in function, even if it is actually provided as part of the Drools DMN Engine out of the box. The DMN Revision Task Force group might decide to eventually adopt this in a future release of the specification. In fact, this blog post takes inspiration from drawing additional consequences after a Vendor proposal raised similar use-case in the DMN RTF Group: I believe this is a very encouraging demonstration of the power of open standards and their communities, where innovations are generated by the collaboration of different Vendors! Previously, we have been internally experimenting with a similar concept called “&lt;kbd&gt;lambda-update(object,[fields])&lt;/kbd&gt;”, but the ultimate approach presented with this post is much simpler.&lt;/p&gt;   
&lt;p&gt;In the meantime of that final DMN approval, the usage of this extended built-in function is to be considered experimental.&lt;/p&gt;   
&lt;p&gt;The DMNContext in the dmn output results contains as expected the two structures, and they both conform to the ItemDefinition defining the content of said structure, as expected. On the Drools DMN Engine Java API however as we have learnt, they are &lt;strong&gt;not&lt;/strong&gt; the same &lt;em&gt;instances&lt;/em&gt; and they are &lt;em&gt;not necessarily&lt;/em&gt; the same Java class: it could be the case the input is supplied as a Pojo and the output resulting as a java.util.Map, or it could also work by having a java.util.Map as input and again as output. Naturally in any case, either the Pojo or either the java.util.Map must conform (or do conform automatically when produced by the engine) to the applicable ItemDefinition(s), meaning they include all the properties expected from the ItemDefinition’s components. This is an implementation detail of the embedded Java API, and it is completely transparent when dealing with REST APIs, such as those code generated on a Kogito based application, or by leveraging the Kie Server’s “Next generation DMN model specific endpoints” (&lt;a href=&quot;https://issues.redhat.com/browse/BAPL-1787&quot;&gt;BAPL-1787&lt;/a&gt;). This is also completely transparent when integrating DMN inside a jBPM BRE Task, as mentioned thanks to the improvement of (&lt;a href=&quot;https://issues.redhat.com/browse/JBPM-9783&quot;&gt;JBPM-9783&lt;/a&gt;).&lt;/p&gt;   
&lt;p&gt;The same decision logic for the new Decision node could have equivalently be expressed with a boxed function invocation too:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh6.googleusercontent.com/fYJ6x2siAdKXz9dBdZ1xIQGlD3M1dIUxD_Ngn-D9yFKwd2mPMhC88D9OMbHgaJ9gkY_Brf4MZQv0OGewgofM5Kz9lpJjhpuYuRQfQtzarqqNDrkdPzgvAxo717OuFy20SXSZLh5F&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;The same DMN model would indeed code generate the expected REST API endpoint definitions on a Kogito based application too:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh4.googleusercontent.com/VQcNad0IW3e7bqvJh0zBjIrsDxxnCGJ9EhfYRaVLdNshGd5QgfO6GgRlbqhsWtrXt1SjJOitb9ylyKR8kj2UT1xUi71cLMBUQyCobrdtwqOnfDO2maEZuMRHeYRZf9sRSXRwkk8T&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We can notice the payload structure both in Request and Response of the Swagger / OpenAPI is the expected one.&lt;/p&gt;   
&lt;h2&gt;What about data transformation?&lt;/h2&gt;   
&lt;p&gt;This example naturally draws even closer to additional use-cases which can be integrated in the context of DMN implementation, such as &lt;strong&gt;data transformation&lt;/strong&gt;.&lt;/p&gt;   
&lt;p&gt;The power of DMN can be fully exploited when using its notation to describe &lt;em&gt;business rules and decision logic&lt;/em&gt;, and while it can be also employed to “transform” data in a way similarly described in this post, using DMN purely for data transformation may not always be the best solution. For the use-case dealing only with pure data transformation requirements, we suggest you also take a look at &lt;a href=&quot;http://www.atlasmap.io&quot;&gt;AtlasMap&lt;/a&gt;, a data mapping solution with interactive web based user interface.&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;We have learnt how to leverage open standards in the best possible way to achieve the desired goals, even better by considering two very pragmatic strategies:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;Combine DMN with the power of BPMN&lt;/li&gt; 
 &lt;li&gt;Use DMN standalone and an extended feature&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;We have also seen how integrations and collaborations are foundational elements which allowed us to achieve these important results!&lt;/p&gt;   
&lt;p&gt;Demo code material is available, which can be used as reference for the content presented in this post, at: &lt;a href=&quot;https://github.com/tarilabs/dmn-data-enrichment-20210804&quot;&gt;https://github.com/tarilabs/dmn-data-enrichment-20210804&lt;/a&gt;&amp;nbsp;&lt;/p&gt;   
&lt;p&gt;What do you think of these approaches? Let us know in the comments down below!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>How to Capture Business Decisions using DMN: Introduction to Some Basic Patterns and Their Value</title>
      <link>https://matteomortari.com/blog/2021/how-to-capture-business-decisions-using-dmn-introduction-to-some-basic-patterns-and-their-value.html</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/how-to-capture-business-decisions-using-dmn-introduction-to-some-basic-patterns-and-their-value.html</guid>
      	<description>
	&lt;p&gt;I am very glad for the opportunity to have &lt;a href=&quot;https://www.youtube.com/watch?v=0hQEMMRVHjA&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;presented at IIBA this session on DMN patterns&lt;/a&gt; with Denis Gagné CEO &amp;amp; CTO of Trisotech!&lt;/p&gt;   
&lt;ol&gt; 
 &lt;li&gt;how business analysts can use the DMN open-standard to capture the requirements for operational business decisions&lt;/li&gt;   
 &lt;li&gt;some of the recurring basic patterns in modeling (Q&amp;amp;A, Scoring, Classification and Categorisation, Ranking..)&lt;/li&gt;   
 &lt;li&gt;how to transform these decision models into actual &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;executable business decision services&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt;   
&lt;p&gt;In the following you can find the recording, as well as a brief summary of some key highlights for the patterns.&lt;/p&gt;   
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Webinar recording&lt;/h2&gt;   
&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio-16x9 ratio&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/watch?v=0hQEMMRVHjA IIBA Webinar recording&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;Businesses continuously make Business Decisions. Some of these decisions are strategic business decisions, but a lot are operational business decisions taken every day within every transaction. With the ever-increasing number of laws and regulations that may apply or regulate these operational business decisions, business analysts are more often called upon to document/specify how these business decisions are to be taken in order to provide transparency and to offer auditable traces of the actual decisions taken. In this insightful session, we will introduce how business analysts can use DMN to capture the requirements for operational business decisions, some of the recurring basic patterns in modeling these business decisions and will even show how to transform these decision models into actual executable business decision services.&lt;/p&gt;   
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Pattern: Q&amp;amp;A&lt;/h2&gt;   
&lt;p&gt;Not to be confused with the generally applicable multiple-choice paradigm, on of the key aspects of DMN models is that each Decision is meant to answer a question, usually a business related question or a domain question.&lt;/p&gt;   
&lt;p&gt;This Q&amp;amp;A pattern is a built-in of the DMN standard, thanks to the optional attributes &quot;&lt;em&gt;question&lt;/em&gt;&quot; and &quot;&lt;em&gt;allowedAnswers&lt;/em&gt;&quot;, which business analyst and subject matter expert modelers often use to describe using natural language to complement the modeled decision logic semantic.&lt;/p&gt;   
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Pattern: Scoring&lt;/h2&gt;   
&lt;p&gt;Input variables, described as InputData, are often analysed and weighted into a score, typically to be later used in the DMN model with other patterns (such as categorisation) or directly with decision logic such as thresholds.&lt;/p&gt;   
&lt;p&gt;Examples:&lt;/p&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/image-2-1024x776.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/image-3-1024x596.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Pattern: Classification&lt;/h2&gt;   
&lt;p&gt;In this pattern, model variables are recognized, differentiated and classified to be better understood; usually this is done to verbalise classes and often using a Score as an input (ref above).&lt;/p&gt;   
&lt;p&gt;It is important to be aware of several types of classification:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Classification&lt;/strong&gt;: separating based on class labels&lt;/li&gt;   
 &lt;li&gt;&lt;strong&gt;Clustering&lt;/strong&gt;: separating based similarities without class labels&lt;/li&gt;   
 &lt;li&gt;&lt;strong&gt;Categorization&lt;/strong&gt;: subsuming classes (to realize a taxonomy)&lt;/li&gt;   
 &lt;li&gt;&lt;strong&gt;Segmentation&lt;/strong&gt;: complete and disjunct categorization&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;Examples:&lt;/p&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/image-4.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/image-5-1024x258.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Pattern: Ranking&lt;/h2&gt;   
&lt;p&gt;In this pattern, the position, or rank, of each item in a collection is determined. This pattern is usually a bit more complex to implement if compared to the previous one, requiring iteration with sorting. Fortunately the DMN standard gives all the tools to implement this pattern more easily!&lt;/p&gt;   
&lt;p&gt;For example:&lt;/p&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/image-6-1024x493.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Transform DMN models into executable business decision services&lt;/h2&gt;   
&lt;p&gt;Have you found this content interesting? Don&apos;t forget a great advantage of DMN models is that they can be &lt;em&gt;immediately&lt;/em&gt; deployed as executable services, thanks to the &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Drools DMN engine&lt;/a&gt; and &lt;a href=&quot;https://kogito.kie.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Kogito&lt;/a&gt;!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>a KIE JBang! catalog</title>
      <link>https://matteomortari.com/blog/2021/a-kie-jbang-catalog.html</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/a-kie-jbang-catalog.html</guid>
      	<description>
	&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/gdE5Nb5gT34&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;In this episode, I want to share with you about an experimental &lt;a href=&quot;https://www.jbang.dev/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;JBang&lt;/a&gt; catalog to quickly operate some KIE capabilities such as DMN and FEEL, directly on the Command Line!&lt;/p&gt;   
&lt;h2&gt;What is JBang!?&lt;/h2&gt;   
&lt;p&gt;JBang! is a powerful command line and shell capability, allowing you to run jsh and Java &lt;span style=&quot;text-decoration: underline;&quot;&gt;source code&lt;/span&gt; as a script.&lt;/p&gt;   
&lt;p&gt;
 &lt;meta charset=&quot;utf-8&quot;&gt;JBang offers a great advantage with Java 8 compatibility and a very smart way to handle dependencies directly within the source of the scripts. You can read more about how 
 &lt;meta charset=&quot;utf-8&quot;&gt;JBang facilitates Developers, but also Students and Educators create, edit, and run self-contained source-only Java programs &lt;a href=&quot;https://www.jbang.dev/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;on the Jbang! website&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;You only need 
 &lt;meta charset=&quot;utf-8&quot;&gt;JBang to be installed on your system in order to follow the steps shown in the video and summarised in this post.&lt;/p&gt;   
&lt;h2&gt;DMN&lt;/h2&gt;   
&lt;p&gt;You can use the &lt;kbd&gt;jbang dmn@kiegroup&lt;/kbd&gt; alias to evaluate a&amp;nbsp;&lt;a href=&quot;https://drools.org/learn/dmn.html&quot;&gt;DMN model&lt;/a&gt;&amp;nbsp;using the Drools DMN Engine:&lt;/p&gt;   &lt;a href=&quot;https://asciinema.org/a/433150?autoplay=1&amp;amp;speed=2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/433150.svg&quot; class=&quot;img-fluid&quot;&gt;&lt;/a&gt;   
&lt;p&gt;The script takes as input a DMN mode file, and a DMN Context expressed as JSON. It produces as output a JSON of the evaluated DMN result context.&lt;/p&gt;   
&lt;p&gt;As with most common command line utilities, you can issue &lt;kbd&gt;--help&lt;/kbd&gt; to get usage help information:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;jbang dmn@kiegroup --help&lt;/code&gt;&lt;/pre&gt;   
&lt;h2&gt;Converter for Excel (.xls/.xlsx) files containing DMN decision tables&lt;/h2&gt;   
&lt;p&gt;You can use the &lt;kbd&gt;jbang xls2dmn@kiegroup&lt;/kbd&gt; alias to convert Excel (.xls/.xlsx) files containing&amp;nbsp;&lt;a href=&quot;https://drools.org/learn/dmn.html&quot;&gt;DMN decision tables&lt;/a&gt;&amp;nbsp;using the Drools DMN Engine experimental converter:&lt;/p&gt;   &lt;a href=&quot;https://asciinema.org/a/433167?autoplay=1&amp;amp;speed=2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/433167.svg&quot; class=&quot;img-fluid&quot;&gt;&lt;/a&gt;   
&lt;p&gt;For more details about the Converter and the conventions to be used in the Excel file, please reference the&amp;nbsp;&lt;a href=&quot;https://github.com/kiegroup/drools/tree/main/kie-dmn/kie-dmn-xls2dmn-cli#readme&quot;&gt;Converter documentation&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;FEEL&lt;/h2&gt;   
&lt;p&gt;You can use the &lt;kbd&gt;jbang feel@kiegroup&lt;/kbd&gt; alias to evaluate a&amp;nbsp;&lt;a href=&quot;https://drools.org/learn/dmn.html&quot;&gt;FEEL expression&lt;/a&gt;&amp;nbsp;using the Drools DMN Engine.&lt;/p&gt;   
&lt;p&gt;This script takes as input a FEEL expression (as a string) and it produces a FEEL representation of the result of evaluating the expression.&lt;/p&gt;   &lt;a href=&quot;https://asciinema.org/a/433154?autoplay=1&amp;amp;speed=2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/433154.svg&quot; class=&quot;img-fluid&quot;&gt;&lt;/a&gt;   
&lt;p&gt;This jBang alias can be very handy when you want to quickly try out some FEEL expressions, using the command line for additional fun!&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;a href=&quot;https://github.com/kiegroup/jbang-catalog#converter-for-excel-xlsxlsx-files-containing-dmn-decision-tables&quot;&gt;&lt;/a&gt;&lt;/h2&gt;   
&lt;p&gt;You can reference the video embedded with this post to get an overview of how to use this JBang! catalog. Don&apos;t forget to checkout the &lt;a href=&quot;https://github.com/kiegroup/jbang-catalog#readme&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;README in the repository&lt;/a&gt; for the full details.&lt;/p&gt;   
&lt;p&gt;For more information on JBang, see:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;https://www.jbang.dev/documentation/guide/latest/installation.html&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;https://www.jbang.dev/documentation/guide/latest/usage.html&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;Try it out today!&lt;/p&gt;   
&lt;p&gt;Go to: https://github.com/kiegroup/jbang-catalog&lt;/p&gt;   
&lt;p&gt;Don&apos;t forget to let us know your feedback using the &lt;a href=&quot;https://kogito.kie.org/community/&quot;&gt;Kogito community&lt;/a&gt; channels!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Integrating DMN Validation on BC, Maven, Kogito, ...and beyond!</title>
      <link>https://matteomortari.com/blog/2021/integrating-dmn-validation-on-bc-maven-kogito-and-beyond.html</link>
      <pubDate>Tue, 3 Aug 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/integrating-dmn-validation-on-bc-maven-kogito-and-beyond.html</guid>
      	<description>
	&lt;p&gt;In this post I want to highlight all the integrations of the &lt;code&gt;kie-dmn-validation&lt;/code&gt; module on several platforms.&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio-16x9 ratio&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/Cm43NQXyk_o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;h2&gt;What is it?&lt;/h2&gt;   
&lt;p&gt;In a &lt;a href=&quot;https://blog.kie.org/2020/09/dmn-validation-updates-kogito-and-migration-to-executable-model.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;previous post&lt;/a&gt;, we have seen how the Drools DMN validation module was integrated specifically on the Kogito platform. As a short review, the kie-dmn-validation module offer several features for:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;validation of &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DMN&lt;/a&gt; model against specification XSDs&lt;/li&gt; 
 &lt;li&gt;static validation of DMN file 
  &lt;ul&gt; 
   &lt;li&gt;e.g.: pre-compilation phase semantic validations (duplicate names, missing decision logic, etc.)&lt;/li&gt; 
   &lt;li&gt;fun-fact: static validation is performed with… Drools rules!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;compilation phase checks&lt;/li&gt; 
 &lt;li&gt;decision tables static analysis 
  &lt;ul&gt; 
   &lt;li&gt;implements&amp;nbsp;&lt;a href=&quot;https://www.amazon.com/Dmn-Method-Style-2nd-Pracitioners/dp/0982368178&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Method &amp;amp; Style checks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;semantic checks&lt;/li&gt; 
   &lt;li&gt;Hit Policy recommender&lt;/li&gt; 
   &lt;li&gt;Experimental features, such as the MC/DC test case generator&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;The pre-compilation phase, where semantic validations are performed statically by introspecting deserialised DMN models, make use of &lt;a href=&quot;https://www.youtube.com/watch?v=IdS7dgSj3ds&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Drools rules&lt;/a&gt; to ensure the conformance requirements from the&amp;nbsp;&lt;a href=&quot;https://www.omg.org/spec/DMN&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DMN specification&lt;/a&gt;&amp;nbsp;itself are respected in the DMN model provided by the user.&lt;/p&gt;   
&lt;h2&gt;Integration on Kie v7: Business Central and Maven (KJAR)&lt;/h2&gt;   
&lt;p&gt;Speaking of Kie (v7) platforms, the DMN Validation is performed out of the box:&lt;/p&gt;   
&lt;ul&gt; 
 &lt;li&gt;When editing a DMN Model on Business Central&lt;br&gt;the Validation is performed when clicking the Save button, and when the full project is being built.&lt;/li&gt; 
 &lt;li&gt;When building the KJAR-based project with Maven&lt;br&gt;the Validation is performed by the &lt;code&gt;kie-maven-plugin&lt;/code&gt; for any DMN model knowledge asset found in the KJAR project automatically&lt;/li&gt; 
&lt;/ul&gt;   
&lt;p&gt;There is some fine-print about out of the box DMN Validation enabled features, on the Kie v7 platform:&lt;/p&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;table class=&quot;table table-sm table-striped&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
     &lt;td&gt;&lt;strong&gt;kie-maven-plugin&lt;/strong&gt;&lt;/td&gt; 
     &lt;td&gt;&lt;strong&gt;DMN Editor on BC&lt;/strong&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;VALIDATE_SCHEMA&lt;/strong&gt;&lt;br&gt;&lt;em&gt;compliance with DMN xml&lt;/em&gt;&lt;/td&gt; 
     &lt;td&gt;Active by default&lt;/td&gt; 
     &lt;td&gt;Skipped (always skipped)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;VALIDATE_MODEL&lt;/strong&gt;&lt;br&gt;&lt;em&gt;semantic validation&lt;/em&gt;&lt;/td&gt; 
     &lt;td&gt;Active by default&lt;/td&gt; 
     &lt;td&gt;Always performed&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;VALIDATE_COMPILATION&lt;/strong&gt;&lt;br&gt;&lt;em&gt;consistency during compilation&lt;/em&gt;&lt;/td&gt; 
     &lt;td&gt;Active by default&lt;/td&gt; 
     &lt;td&gt;Always performed*&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;&lt;strong&gt;ANALYZE_DECISION_TABLE&lt;/strong&gt;&lt;br&gt;&lt;em&gt;decision table static analysis&lt;/em&gt;&lt;/td&gt; 
     &lt;td&gt;Active by default&lt;/td&gt; 
     &lt;td&gt;Always performed&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;*&lt;sub&gt; except for DMN-&amp;gt;Java integration checks (&lt;a href=&quot;https://issues.redhat.com/browse/DROOLS-5577&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DROOLS-5577&lt;/a&gt;)&lt;/sub&gt;&lt;/p&gt;   
&lt;p&gt;The table summarises how Business Central and the kie-maven-plugin use validation features of the DMN Validation module. There is no option to customize which features to use on BC. When using a Maven build of a KJAR project with the kie-maven-plugin, you can customize which features to use; you can reference to &lt;a href=&quot;https://docs.jboss.org/drools/release/7.57.0.Final/drools-docs/html_single/index.html#dmn-validation-con_dmn-models&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;this chapter in the documentation&lt;/a&gt; referring to &quot;&lt;a href=&quot;https://docs.jboss.org/drools/release/7.57.0.Final/drools-docs/html_single/index.html#dmn-validation-con_dmn-models&quot;&gt;Configurable DMN validation in Drools&lt;/a&gt;&quot; and the &lt;code&gt;validateDMN&lt;/code&gt; option of the kie-maven-plugin configuration.&lt;/p&gt;   
&lt;h2&gt;Integration on Kogito&lt;/h2&gt;   
&lt;p&gt;As mentioned in the &lt;a href=&quot;https://blog.kie.org/2020/09/dmn-validation-updates-kogito-and-migration-to-executable-model.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;previous post&lt;/a&gt;, the kie-dmn-validation module is integrated out of the box on the Kogito platform, during the code generation phase.&lt;/p&gt;   
&lt;p&gt;All DMN Validation features are enabled by default. You can customize with a configuration option whether to disable this validation integration; you can reference to &lt;a href=&quot;https://docs.kogito.kie.org/latest/html_single/#con-dmn-validation_kogito-dmn-models&quot;&gt;this chapter in the documentation&lt;/a&gt; referring to &quot;&lt;a href=&quot;https://docs.kogito.kie.org/latest/html_single/#con-dmn-validation_kogito-dmn-models&quot;&gt;Configurable DMN validation in Kogito&lt;/a&gt;&quot; and the &lt;code&gt;kogito.decisions.validation&lt;/code&gt; option of the Kogito application configuration.&lt;/p&gt;   
&lt;h2&gt;Integration on JIT executor&lt;/h2&gt;   
&lt;p&gt;The Just-in-Time (JIT) executor is an experimental module based on Kogito, Quarkus and Native Image compilation; it is meant as a foundational tool to support development-time of DMN models and other knowledge assets.&lt;/p&gt;   
&lt;p&gt;The JIT Executor provides integration of the kie-dmn-validation to perform all the DMN validation by means of an API; you can reference &lt;a href=&quot;https://github.com/kiegroup/kogito-apps/tree/main/jitexecutor#validation&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;the documentation for more details&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;You might be interested to know the JIT Executor is the underlying engine empowering the local DMN runner, described in &lt;a href=&quot;https://blog.kie.org/2021/07/instantaneous-feedback-loop-for-dmn-authoring-with-dmn-runner.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;As we have seen in this article, not only the &lt;code&gt;kie-dmn-validation&lt;/code&gt; module provides several helpful features to validate DMN model during build-time, such as semantic validation and Decision Table static analysis!&lt;/p&gt;   
&lt;p&gt;It is also a set of comprehensive capabilities which we have integrated for you on several platforms, including Kie v7 KJAR maven build, Business Central, Kogito and Kogito toolings!&lt;/p&gt;   
&lt;p&gt;Have you tried it? Let us know your feedback in the comments below!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Intelligent Kafka message routing using Drools DMN Engine and Apache Camel</title>
      <link>https://matteomortari.com/blog/2021/intelligent-kafka-message-routing-using-drools-dmn-engine-and-apache-camel.html</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/intelligent-kafka-message-routing-using-drools-dmn-engine-and-apache-camel.html</guid>
      	<description>
	&lt;p&gt;In this post I want to share an interesting use-case of Healthcare message routing, which we implemented using the &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Drools DMN Engine&lt;/a&gt; and &lt;a href=&quot;https://camel.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Apache Camel&lt;/a&gt;, in order to route and dispatch Patient&apos;s Admission-Discharge-Transfer message types to the required &lt;a href=&quot;https://kafka.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Kafka topics&lt;/a&gt; and therefore queuing the message to the appropriate sub-system. I believe it is both a &lt;strong&gt;very pragmatic and interesting combination of technologies&lt;/strong&gt;, while it also shows &lt;strong&gt;a blueprint and generalised pattern&lt;/strong&gt; which can be easily replicated to other domains, in order to achieve &lt;strong&gt;intelligent message routing&lt;/strong&gt; for Apache Kafka for many other use-cases.&lt;/p&gt;   
&lt;p&gt;You can see the tech demo in action in this video and further below for additional details:&lt;/p&gt;   
&lt;div class=&quot;row justify-content-center text-center py-3&quot;&gt;
 &lt;div class=&quot;col-lg-6&quot;&gt;
  &lt;div class=&quot;ratio-16x9 ratio&quot;&gt;
   &lt;iframe src=&quot;https://www.youtube.com/embed/tNe6QU1Yq8U&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;The use-case for this tech demo is about specific types of message in the Healthcare domain, which contains information about the Patient&apos;s Admission-Discharge-Transfer (ADT); these types of messages, depending on a set of rules, need to be dispatched to the appropriate Kafka topic(s). This way, further systems and applications downstream can connect to these queues and consume only the relevant messages of interest.&lt;/p&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/Screenshot-2021-06-27-at-14.59.14-1024x575.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
  &lt;figcaption&gt;
    EIP diagram for Intelligent Healthcare message routing 
  &lt;/figcaption&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;&lt;strong&gt;Rules are formalised by the domain expert&lt;/strong&gt;, in this case the Healthcare professional, who usually is &lt;strong&gt;not a software developer&lt;/strong&gt;, but is knowledgeable and interested in the data contained in the message itself. This makes it a perfect fit for DMN, as the rules can be easily encoded using a DMN Decision Table, so that the decision about the destination queue names can easily be represented in a graphical format --one of the many key advantages of the DMN Standard.&lt;/p&gt;   
&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/5iBRuWOs4wKdwIxAGyMgdgb7Jh_pU26hTXODyip_A8UfCPfCCCtH0HZGlSzCxy4T7LWV4_M2u1BE4KkOJl5pveTcDLUOhjxJM6INyUQAX_rj0w_leKwFcEoUSeLsVOU3AWaW7aMlsos&quot; class=&quot;img-fluid&quot;&gt;&lt;/p&gt;   
&lt;p&gt;In the example screenshot, the domain expert is interested with the first rule in all ADT messages coming only from the application called &quot;MMS&quot;: these needs to be dispatched to the queue named &quot;MMSAllADT&quot; on Kafka. A second rule prescribe that ADT messages, again only from the application called &quot;MMS&quot;, but pertaining only to a Patient&apos;s discharge (reported as &quot;A03&quot; on HL7), shall also be dispatched to topic &quot;MMSDischarges&quot; on Kafka. For the purpose of simplicity of the demo, the table contains only 2 criteria; naturally this table can be easily extended to accomodate all the specific rules required, as the demonstration video also shows.&lt;/p&gt;   
&lt;p&gt;The Enterprise Integration Pattern diagram can be revisited, now annotated with the actual technologies used:&lt;/p&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/Screenshot-2021-06-27-at-15.04.28-1024x576.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;For the purpose of this tech demo, the incoming message format is exchanged using the &lt;a href=&quot;http://www.hl7.org/implement/standards/product_section.cfm?section=13&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;HL7 v2 standard&lt;/a&gt;, and provided to a REST Endpoints, which may also serve as a &lt;a href=&quot;https://cds-hooks.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;CDS hook&lt;/a&gt;. Naturally this could be extended to use more modern standards in the same healthcare domain, such as &lt;a href=&quot;https://hl7.org/FHIR&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;HL7 FHIR&lt;/a&gt;.&lt;/p&gt;   
&lt;p&gt;It is important to reiterate this&lt;strong&gt; &quot;Intelligent message routing&quot; blueprint&lt;/strong&gt; is very generic, therefore can be analogously architected &lt;strong&gt;on top of other business domains&lt;/strong&gt;, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Financial_services&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;FSI&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_of_things&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;IoT&lt;/a&gt;, etc.&lt;/p&gt;   
&lt;p&gt;Another advantage of this blueprint is the &lt;strong&gt;separation of concerns between the business domain logic and the integration code&lt;/strong&gt;; that is the separation between the rules formalised graphically by means of a DMN Decision Table to decide on which topic name the message shall be queued into, and the actual Apache Camel code implementing the integration between the different systems. This way, the business expert can focus on just and only the decision to be modelled using DMN, while the software developer can offer a very extensible and robust intelligent routing capability.&lt;/p&gt;   
&lt;p&gt;Taking a little look under the hood, we highlight how the software developer using the Camel DSL only needs to write a minimal amount of code:&lt;/p&gt;   
&lt;div class=&quot;row text-center justify-content-center&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2021/06/Screenshot-2021-06-27-at-15.23.02-1024x576.png&quot; alt=&quot;&quot; class=&quot;img-fluid figure-img&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;I have highlighted visually where the Camel DSL integrates the Drools DMN Engine for the evaluation of the necessary business logic for the rules, in order to decide which Kafka topic(s) the message needs to be queued into, or eventually forwarded to a catch-all queue. This allow to maintain the set of rules and decisions using just and only the DMN model, separately from integration code.&lt;/p&gt;   
&lt;p&gt;In the video, three scenarios are demonstrated:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 1: Normal routing&lt;/strong&gt;&lt;br&gt;This is the standard operating mode.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 2: Failure mode&lt;/strong&gt;&lt;br&gt;This is highlighting the catch-all queue for messages which are not matching any of the prescribed rules of the domain expert&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 3: Add new rule&lt;/strong&gt;&lt;br&gt;One of the most important aspects we highlighted is the ability to update the rules for message dispatching, &lt;strong&gt;without touching a single line of code&lt;/strong&gt;, and this scenario demonstrates how this aspect is technically fully under the control of the domain expert. Naturally, in a real world scenario, several actors and procedures are involved before rolling-over the update on the Production system, going beyond the merely technical requirements; the demo focuses only on the pragmatical aspects.&lt;/li&gt;
&lt;/ul&gt;   
&lt;h3&gt;Conclusions&lt;/h3&gt;   
&lt;p&gt;In this technical demo, we have seen how we can easily integrate &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Drools DMN Engine&lt;/a&gt; and &lt;a href=&quot;https://camel.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Apache Camel&lt;/a&gt;, to achieve Intelligent message routing on top of Apache Kafka. Specifically we have seen how to formalise the rules for the decision of the appropriate dispatch queue using DMN decision tables, so we can manage separately the business requirements from the actual integration code.&lt;/p&gt;   
&lt;p&gt;What do you think of this use-case and this demo? Don&apos;t hesitate to let us know in the comments below!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Cloud native considerations webinar</title>
      <link>https://matteomortari.com/talks/2021/cloud-native-considerations-webinar.html</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">talks/2021/cloud-native-considerations-webinar.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cloud_native_environment_considerations_for_decision_makersa_webinar_series&quot;&gt;Cloud-native environment considerations for decision makers—a webinar series&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this 3-webinar series, we’ll explore several considerations around cloud-native application development, design, and operations. The webinars in this series include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Choose your cloud-native path—an executive checklist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud-native, event-driven design for high-value use cases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How explainable, predictive decision making can help us trust our AI models&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/en/events/webinar/cloud-native-environment-considerations-decision-makers%E2%80%94webinar-series&quot; class=&quot;bare&quot;&gt;https://www.redhat.com/en/events/webinar/cloud-native-environment-considerations-decision-makers%E2%80%94webinar-series&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>IIBA DMN Patterns</title>
      <link>https://matteomortari.com/talks/2021/iiba-dmn-patterns.html</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">talks/2021/iiba-dmn-patterns.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_capture_business_decisions_using_dmn_introduction_to_some_basic_patterns_and_their_value&quot;&gt;How to Capture Business Decisions using DMN: Introduction to Some Basic Patterns and Their Value&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Businesses continuously make Business Decisions. Some of these decisions are strategic business decisions, but a lot are operational business decisions taken every day within every transaction. With the ever-increasing number of laws and regulations that may apply or regulate these operational business decisions, business analysts are more often called upon to document/specify how these business decisions are to be taken in order to provide transparency and to offer auditable traces of the actual decisions taken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this insightful session, we will introduce how business analysts can use DMN to capture the requirements for operational business decisions, some of the recurring basic patterns in modeling these business decisions and will even show how to transform these decision models into actual executable business decision services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>NEW model-specific DMN kie-server endpoints</title>
      <link>https://matteomortari.com/blog/2021/new-model-specific-dmn-kie-server-endpoints.html</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/new-model-specific-dmn-kie-server-endpoints.html</guid>
      	<description>
	&lt;div class=&quot;justify-content-center text-center row py-3&quot;&gt;
&lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/e-YMVvPAEf0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;  
&lt;p&gt;&lt;em&gt;Modernising kie-server with new and more user-friendly DMN endpoints, better Swagger/OpenAPI documentation, easier JSON-based REST invocations; an intermediate step to help developers transitioning to service-oriented deployments such as a Kogito-based application.&lt;/em&gt;&lt;/p&gt;   
&lt;h2&gt;In a nutshell:&lt;/h2&gt;   
&lt;p&gt;The current DMN kie-server endpoints are fully compliant with kie-server extension design architecture, and aligned with all other kie-server services and extensions; however, some aspects of the current &lt;em&gt;generic&lt;/em&gt; approach of kie-server sometimes are not very user-friendly for DMN evaluations, due to limitations of swagger documentation and the REST payloads requirements to follow the generic kie-server marshaller protocol. These aspects do apply to all kie-server services, including naturally DMN kie-server endpoints as well.&lt;br&gt;On other hand, experience shown that building manually the REST payload on Kogito for DMN evaluation is very easy for end-users, thanks to key features pertaining to DMN core capabilities.&lt;/p&gt;   
&lt;p&gt;This &lt;a href=&quot;https://issues.redhat.com/browse/DROOLS-6047&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;new feature (DROOLS-6047)&lt;/a&gt; extends DMN on kie-server with new endpoints, leveraging those core capabilities; the new DMN endpoints provide better Swagger documentation and can be more easily consumed by end-users, therefore contributing to modernising the kie-server platform while also making easier to eventually transition to a full Kogito-based application and deployment!&lt;/p&gt;   
&lt;h2&gt;Why is this needed?&lt;/h2&gt;   
&lt;p&gt;Currently on kie-server, the DMN service exposes 2 endpoints which are fully compliant with kie-server extension design architecture:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;GET /server/containers/{containerId}/dmn&lt;/code&gt;&lt;br&gt;Retrieves DMN model for given container&lt;/li&gt;
&lt;/ul&gt;   
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;POST /server/containers/{containerId}/dmn&lt;/code&gt;&lt;br&gt;Evaluates decisions for given input&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;The current swagger documentation is agnostic to the actual model content of the knowledge asset, like for any other kie-server extension:&lt;/p&gt;   
&lt;p class=&quot;has-text-align-center text-center&quot;&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/oxigk0UqjxH7mDJdq-qQ0Z3gNWoDE6x8SkjTc90fd3FjMjXkURajiFOV3jmWUyKtZuLaLH_TmmA6couiVz__OsxFrlh9AlXpEIq9uHv1EqEo9_GtwlCL0bqwEXbhSGRxeePVlz5g&quot; class=&quot;img-fluid&quot;&gt;&lt;/p&gt;   
&lt;p&gt;This limited style of swagger documentation is &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;em&gt;sometimes&lt;/em&gt;&lt;/span&gt; an undesirable side-effect to the &lt;em&gt;generic&lt;/em&gt; approach of kie-server extension design:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;all kie-server extensions receive as input a generic String, which is actually converted internally to the extension using the generic kie-server marshaller.&lt;br&gt;This causes the swagger documentation to not display anything meaningful for the request body besides Model==string, and the only helpful information can only be provided as a comment (“&lt;em&gt;DMN context to be used while evaluation decisions as DMNContextKS type&lt;/em&gt;”).&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;all kie-server extensions return as output a &lt;code&gt;ServiceResponse&amp;lt;T&amp;gt;&lt;/code&gt;, where the Java’s generic T is extension-specific. Generating swagger documentation with Java generics is already limited, in this case the difficulty compounds because the actual content of T varies, by DMN model to model !&lt;/li&gt;
&lt;/ul&gt;   
&lt;ul&gt;
 &lt;li&gt;the DMN evaluation payload itself contains the coordinates of the model to be evaluated &lt;em&gt;and&lt;/em&gt; the model-specific input context, per the original implementation requirements; but this interconnection between model coordinates &lt;em&gt;values&lt;/em&gt; and input content &lt;em&gt;structure&lt;/em&gt;, is pragmatically impossible to be defined meaningfully with a Swagger or OpenAPI descriptor.&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;About the last point specifically, consider this example DMN payload:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{
       &quot;model-namespace&quot;: &quot;https://kiegroup.org/dmn/_FA9849E2-C92E-4E27-83BF-07A7428DC9C9&quot;,
       &quot;model-name&quot;: &quot;Traffic Violation&quot;,
       &quot;dmn-context&quot;: {
           &quot;Driver&quot;: ...,
           &quot;Violation&quot;: ...
       }
    }&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;because the &lt;em&gt;content&lt;/em&gt; of &lt;code&gt;dmn-context&lt;/code&gt; depends on the &lt;em&gt;values&lt;/em&gt; of &lt;code&gt;model-namespace&lt;/code&gt; and &lt;code&gt;model-name&lt;/code&gt; coordinates, there is no pragmatic way to define with Swagger/OpenAPI that &lt;code&gt;dmn-context&lt;/code&gt; must have the properties “Driver”, “Violation” for this traffic violation model, or property “Customer” for another DMN model.&lt;/p&gt;   
&lt;p&gt;Besides endpoint documentation limitations, experience proved that building &lt;em&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;manually from scratch&lt;/span&gt;&lt;/em&gt; the kie-server generic payload following the style of the kie-server generic marshaller is very difficult for most end-users (in fact we always advise to use the Kie Server Client API first, and not start from scratch, but this suggestion is often ignored anyway):&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;XML/JAXB format requires domain model pojo to be correctly annotated first, and building Java collection manually is quite tricky.&lt;/li&gt;
&lt;/ul&gt;   
&lt;ul&gt;
 &lt;li&gt;XML/XStream is a more natural format, still requires domain model pojo annotations, requires to respect the domain object FQN, but is yet another xml format while most end-users seem to prefer json instead.&lt;/li&gt;
&lt;/ul&gt;   
&lt;ul&gt;
 &lt;li&gt;JSON/Jackson would be the user preference nowadays, but requires to respect the domain object FQN which is very alien to json native users.&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;Example. The correct way to marshall for Traffic Violation example, respecting the domain model defined in the kjar project, would be:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{
       &quot;model-namespace&quot;: &quot;https://kiegroup.org/dmn/_FA9849E2-C92E-4E27-83BF-07A7428DC9C9&quot;,
       &quot;model-name&quot;: &quot;Traffic Violation&quot;,
       &quot;dmn-context&quot;: {
           &quot;Driver&quot;: { &lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&quot;com.acme.Driver&quot; : {&lt;/span&gt;&lt;/strong&gt;
               &quot;Points&quot;: 15
           }},
           &quot;Violation&quot;: { &lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&quot;com.acme.Violation&quot; : {&lt;/span&gt;&lt;/strong&gt;
               &quot;Type&quot;: &quot;speed&quot;,
               &quot;Date&quot;: &quot;2020-10-01&quot;,
               &quot;Actual Speed&quot;: 111,
               &quot;Speed Limit&quot;: 100
           }}
       }
    }&lt;/code&gt;&lt;/pre&gt;   
&lt;p&gt;Everything would be much more easier, while building the JSON body payload manually for DMN evaluation, if we could drop the &lt;em&gt;strict&lt;/em&gt; requirement to respect the generic kie-server marshalling format.&lt;/p&gt;   
&lt;h2&gt;NEW model-specific DMN kie-server endpoints&lt;/h2&gt;   
&lt;p&gt;We can now move past and beyond these limitations, thanks to the &lt;em&gt;next generation&lt;/em&gt; of DMN endpoints on kie-server, leveraging some new DMN core capabilities:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;programmatic generation of Swagger and OpenAPI (Swagger/OAS) metadata (&lt;a href=&quot;https://issues.redhat.com/browse/DROOLS-5670&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DROOLS-5670&lt;/a&gt;)&lt;/li&gt;
 &lt;li&gt;consistent DMNContext build from JSON, based on DMN Model metadata (&lt;a href=&quot;https://issues.redhat.com/browse/DROOLS-5719&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DROOLS-5719&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;to ultimately offer more user-friendly endpoints on kie-server for DMN evaluation!&lt;/p&gt;   
&lt;p&gt;Following similar style to what is offered today via Kogito, summarized in this &lt;a href=&quot;https://blog.kie.org/2020/08/kogito-2840-about-dmn-endpoints-on-kogito.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;blog post&lt;/a&gt;, we implemented the following new DMN endpoints on kie-server:&lt;/p&gt;   
&lt;ol&gt;
 &lt;li&gt;&lt;code&gt;GET /server/containers/{containerId}/dmn&lt;strong&gt;/openapi.json&lt;/strong&gt; (|.yaml)&lt;br&gt;&lt;/code&gt;Retrieves Swagger/OAS for the DMN models&amp;nbsp;in the kjar project&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;GET /server/containers/{containerId}/dmn/models&lt;strong&gt;/{modelname}&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;Standard DMN XML but with&lt;span style=&quot;text-decoration: underline;&quot;&gt;out&lt;/span&gt; any decision logic, so this can be used as a descriptor of the DMN model (which are the inputs, which are the decisions), while using the same format of the DMN XSD instead.&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;POST /server/containers/{containerId}/dmn/models&lt;strong&gt;/{modelname}&lt;br&gt;&lt;/strong&gt;&lt;/code&gt;JSON-only evaluation of a specific DMN model with a body payload tailored for the specific model&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;POST /server/containers/{containerId}/dmn/models/{modelname&lt;strong&gt;}/{decisionServiceName}&lt;br&gt;&lt;/strong&gt;&lt;/code&gt;JSON-only evaluation of a specific decision service of a specific DMN model with a body payload tailored for the specific model&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;POST /server/containers/{containerId}/dmn/models/{modelname}&lt;strong&gt;/dmnresult&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;JSON-only evaluation of a specific DMN model with a body payload tailored for the specific model, but returning a JSON representation as a DMNResult&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;POST /server/containers/{containerId}/dmn/models/{modelname}&lt;strong&gt;/{decisionServiceName}/dmnresult&lt;/strong&gt;&lt;/code&gt;&lt;br&gt;JSON-only evaluation of a specific decision service of a specific DMN model with a body payload tailored for the specific model, but returning a JSON representation as a DMNResult&lt;/li&gt;
&lt;/ol&gt;   
&lt;p&gt;For the difference between “business-domain” and “dmnresult” variants of the rest endpoints, &lt;a href=&quot;https://blog.kie.org/2020/08/kogito-2840-about-dmn-endpoints-on-kogito.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;reference the original blog post&lt;/a&gt; as also linked above.&lt;/p&gt;   
&lt;p&gt;Making reference to the Traffic Violation example model, this new capability can now offer on kie-server something similar to:&lt;/p&gt;   
&lt;p class=&quot;has-text-align-center text-center&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/xlHutscoULeSZNrfLyGAhwC82Z23J9f_Q9ToTKUhX_3An7K1Z8DEmLTHDm19UoUtGmGhbDIPxl04e1jsDnEP0k6YbIWjplU-eaLl1bWJJIyplmKVgdMa5lreuH3eO80_oCp4bOth&quot; class=&quot;img-fluid&quot;&gt;&lt;/p&gt;   
&lt;p&gt;As we can see, both the input body payload and the response body payload offer Swagger/OAS schemas which are consistent with the &lt;em&gt;specific&lt;/em&gt; DMN model!&lt;/p&gt;   
&lt;p&gt;This is possible thanks to a convergence of factors:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;Because each REST POST endpoint for DMN evaluation is specific for DMN model in the REST Path, it is possible to offer Swagger/OAS definition which are DMN model-specific&lt;br&gt;e.g.: because &lt;code&gt;POST /server/containers/&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;mykjar-project&lt;/span&gt;&lt;/strong&gt;/dmn&lt;strong&gt;/&lt;span style=&quot;text-decoration: underline;&quot;&gt;traffic-violation&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;br&gt;is a REST endpoint specific to the Traffic Violation model, both its input and output payload &lt;em&gt;can&lt;/em&gt; now be documented properly in the Swagger/OAS schema definitions.&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;Because each Swagger/OAS definition is offered at kjar/kie-container level, it is possible to generate programmatically the schema definitions for the DMN models contained only in the specific container.&lt;br&gt;e.g.: because &lt;code&gt;GET /server/containers/&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;mykjar-project&lt;/span&gt;&lt;/strong&gt;/dmn&lt;strong&gt;/&lt;span style=&quot;text-decoration: underline;&quot;&gt;openapi.json&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;br&gt;would offer only definitions for the DMN models inside “mykjar-project”.&lt;br&gt;This is thanks to the following DMN core capability: programmatic generation of Swagger/OAS metadata (&lt;a href=&quot;https://issues.redhat.com/browse/DROOLS-5670&quot;&gt;DROOLS-5670&lt;/a&gt;)&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;Because these endpoints are DMN evaluation specific and focusing on a natural and &lt;em&gt;idiomatic JSON usage&lt;/em&gt;, they do NOT require to follow the &lt;em&gt;generic&lt;/em&gt; kie-server marshalling format.&lt;br&gt;This is thanks to the following DMN core capability: consistent DMNContext build from JSON based on DMNModel metadata (&lt;a href=&quot;https://issues.redhat.com/browse/DROOLS-5719&quot;&gt;DROOLS-5719&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;   
&lt;h2&gt;Any limitations?&lt;/h2&gt;   
&lt;p&gt;Being a new set of endpoints, in addition to the currently existing ones, there is basically no impact on the already-existing DMN kie-server capabilities.&lt;/p&gt;   
&lt;p&gt;As this proposed set of new endpoints are contained within a specific {containerId}, it also means that the openapi.json|.yaml swagger/OAS definition file is only kie-container specific.&lt;/p&gt;   
&lt;p&gt;In turn, it means when accessing the swagger-ui client editor, user need to manually point to the container URL, for example something like:&lt;/p&gt;   
&lt;p class=&quot;has-text-align-center text-center&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/bQw9Vx3SposkXY6xhA1HVG7GAN_UvsFr00gDQfOTwnbPYhv8vp9ff1bPNmrYHsKHdQrW9Dil_XkuReD7OWAZHRgyMKYwQLh1WUzMgRBNKbJvw9ql8MM6JbjnTbbLT1mQZOjTBLAk&quot; class=&quot;img-fluid&quot;&gt;&lt;/p&gt;   
&lt;p&gt;Finally, as this core capability do leverage Eclipse MicroProfile for OpenAPI Specification (OAS) and SmallRye-openapi-core, this requires making use of Swagger-UI and clients which are compatible with OpenAPI Specification version 3.0.3, onwards.&lt;/p&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;We believe this feature meaningfully &lt;em&gt;extends&lt;/em&gt; the current set of capabilities, by providing more user-friendly DMN endpoints on kie-server!&lt;/p&gt;   
&lt;p&gt;Developers can make full use of this new feature to simplify existing REST call invocations, and as a stepping stone to eventually migrate to a Kogito-based application.&lt;/p&gt;   
&lt;p&gt;Have you tried it yet?&lt;br&gt;Do you have any feedback?&lt;br&gt;Let us know in the comments below!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Modeling and development of decision services: DMN with Kogito</title>
      <link>https://matteomortari.com/blog/2021/modeling-and-development-of-decision-services-dmn-with-kogito.html</link>
      <pubDate>Tue, 2 Mar 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/modeling-and-development-of-decision-services-dmn-with-kogito.html</guid>
      	<description>
	&lt;p&gt;I&apos;ve recorded the following &quot;developer notes&quot; as a support medium to demonstrate the progress and the current integration of several Kogito features. As I believe this could be of interest to a wider audience to have a brief &lt;strong&gt;overview of the many capabilities of the Kogito platform for modeling and developing decision services with DMN,&lt;/strong&gt; I am sharing them in this post.&lt;/p&gt;   
&lt;p&gt;Let us know if you find these useful and if you&apos;d like to see more of this kind of video recordings!&lt;/p&gt;   
&lt;h2&gt;DMN with Kogito on Quarkus&lt;/h2&gt;  
&lt;div class=&quot;justify-content-center text-center row py-3&quot;&gt;
&lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/YISlYGIl-jY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;  
&lt;ul&gt;
 &lt;li&gt;Bootstrap a new project with Kogito Maven archetype&lt;/li&gt;
 &lt;li&gt;Author DMN model in VS Code DMN modeler tooling &lt;/li&gt;
 &lt;li&gt;Generate Swagger / OAS descriptors (development support)&lt;/li&gt;
 &lt;li&gt;Test DMN REST endpoints using JUnit ( + RestAssured )&lt;/li&gt;
 &lt;li&gt;Test DMN model using VS Code Test scenarios tooling &lt;/li&gt;
 &lt;li&gt;Inject listener use case&lt;/li&gt;
 &lt;li&gt;Test DMN on Quarkus service using Quarkus dev-mode locally&lt;/li&gt;
 &lt;li&gt;Generated REST API for DMN models with Swagger/OAS descriptors and internals&lt;/li&gt;
 &lt;li&gt;GraalVM Native Image / Mandrel native support &lt;/li&gt;
&lt;/ul&gt;   
&lt;h2&gt;DMN with Kogito on Spring Boot&lt;/h2&gt;  
&lt;div class=&quot;justify-content-center text-center row py-3&quot;&gt;
&lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/4q694kP7jbY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;  
&lt;ul&gt;
 &lt;li&gt;Bootstrap a new project with Kogito Maven archetype&lt;/li&gt;
 &lt;li&gt;Author DMN model in VS Code DMN modeler tooling &lt;/li&gt;
 &lt;li&gt;Generated Swagger / OAS descriptors (development support) and Test DMN SpringBoot service locally&lt;/li&gt;
 &lt;li&gt;Test DMN REST endpoints using JUnit ( + RestAssured )&lt;/li&gt;
 &lt;li&gt;Test DMN model using VS Code Test scenarios tooling &lt;/li&gt;
&lt;/ul&gt;

	</description>
    </item>
    <item>
      <title>Kie Live #24</title>
      <link>https://matteomortari.com/talks/2021/kie-live-24.html</link>
      <pubDate>Tue, 9 Feb 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">talks/2021/kie-live-24.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kielive24_dmn_squeeze_the_most_out_these_features&quot;&gt;KieLive#24: DMN: squeeze the most out these features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Decision Management is an important pillar of Business Automation and a key aspect of all Digital Transformation initiatives. DMN as an open standard is a very effective enabler of decision management both from a methodological but also pragmatic perspective, since the execution semantic is defined in the specification itself. We will delve into some key aspects of DMN in order to understand their characteristics, their advantages and limitations, and their best application in a cloud-native context too. This session is intended to provide interesting insights both to Business Analysts and Developers/Coders.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Decision Camp Monthly session</title>
      <link>https://matteomortari.com/talks/2021/decision-camp-monthly-session.html</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">talks/2021/decision-camp-monthly-session.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kogito_cloud_native_business_automation&quot;&gt;Kogito: Cloud-native Business Automation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kogito is a new platform and framework capabilities based on Drools, jBPM and OptaPlanner, designed to bring our traditional, battle-tested business automation engines to the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have rethought the architecture of our platform to enable Java and JVM developers to realize distributed business automation applications with ease.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Leveraging modern application development frameworks, such as Quarkus, we can integrate seamlessly into a large range of capabilities. In particular, Quarkus has shown how it is possible to push the boundaries of traditional Java frameworks to make them cloud-native, through the power of GraalVM’s native compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a quick introduction to Kogito we will show with practical examples how to build cloud-native event-driven business applications, to the point where applications can be even deployed in a serverless environment, through Knative. We will also show what challenges a distributed environment poses, and how we can deal with them effectively thanks to Kogito.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_speakers_bio&quot;&gt;Speakers Bio:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mariofusco&quot;&gt;Mario Fusco&lt;/a&gt; is a principal software engineer at Red Hat working as Drools project lead. He has a huge experience as Java developer having been involved in (and often leading) many enterprise level projects in several industries ranging from media companies to the financial sector. Among his interests there are also functional programming and Domain Specific Languages. By leveraging these 2 passions he created the open source library lambdaj with the purposes of providing an internal Java DSL for manipulating collections and allowing a bit of functional programming in Java. He is also a Java Champion and the co-author of “Modern Java in Action” published by Manning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/matteomortari&quot;&gt;Matteo Mortari&lt;/a&gt; is a Senior Software Engineer at Red Hat, where he contributes in Drools development and support for the DMN standard. Matteo graduated from Engineering with focus on enterprise systems with a thesis involving rule engines which sparked his interests and influenced his professional career since. He believes there is a whole new range of unexplored applications for Expert Systems (AI) within the Corporate business; additionally, he believes defining the Business Rules on the BRMS system not only enables knowledge inference from raw data but, most importantly, helps to shorten the distance between experts and analysts, between developers and end-users, business stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>About</title>
      <link>https://matteomortari.com/about.html</link>
      <pubDate>Fri, 1 Jan 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">about.html</guid>
      	<description>
	
My name is Matteo Mortari and I&apos;m a Software Engineer.
&lt;br/&gt;&lt;br/&gt;
I believe there is a whole new range of unexplored applications for Rule Engines (AI/Expert Systems) and Machine Learning;
I also believe defining the Business Rules on the BRMS system not only enables knowledge inference from raw data, but most importantly when modeled using the DMN open standard, it helps to shorten the distance between experts and analysts, between developers and end-users, business stakeholders.
&lt;br/&gt;&lt;br/&gt;
I enjoy traveling a lot, both for pleasure and business, which rewarded me already several chances to explore new places and meet new people worldwide.
&lt;br/&gt;&lt;br/&gt;
Feel free to contact me:
&lt;br/&gt;&lt;br/&gt;
&lt;a href=&quot;https://www.linkedin.com/in/matteomortari&quot; class=&quot;text-reset px-1&quot; style=&quot;font-size: xx-large;&quot;&gt;&lt;i class=&quot;bi bi-linkedin&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/MatteoMortari&quot; class=&quot;text-reset px-1&quot; style=&quot;font-size: xx-large;&quot;&gt;&lt;i class=&quot;bi bi-youtube&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/tarilabs&quot; class=&quot;text-reset px-1&quot; style=&quot;font-size: xx-large;&quot;&gt;&lt;i class=&quot;bi bi-github&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;!-- &lt;a href=&quot;https://twitter.com/tari_manga&quot; class=&quot;text-reset px-1&quot; style=&quot;font-size: xx-large;&quot;&gt;&lt;i class=&quot;bi bi-twitter&quot;&gt;&lt;/i&gt;&lt;/a&gt; --&gt;

	</description>
    </item>
    <item>
      <title>DecisionCAMP Monthly event on 2021-01-19</title>
      <link>https://matteomortari.com/blog/2020/decisioncamp-monthly-event-on-2021-01-19.html</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/decisioncamp-monthly-event-on-2021-01-19.html</guid>
      	<description>
	&lt;p&gt;On 2021 January 19th, Mario and myself will present at the perpetual &lt;a href=&quot;https://dmcommunity.org/decisioncamp/monthly-online-sessions/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DecisionCAMP monthly events&lt;/a&gt;!&lt;/p&gt;   
&lt;p&gt;Since DecisionCAMP 2020 held virtually, the organizers have decided to institute a series of perpetual meetups, in addition to the annual conference; you can join the community following the instructions &lt;a href=&quot;https://dmcommunity.org/2020/07/02/the-first-online-decisioncamp-became-a-success/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;   
&lt;h3&gt;Event Title&lt;/h3&gt;   
&lt;p id=&quot;block-e2b23dd1-179f-49e8-940a-6c23aba4a452&quot;&gt;Kogito: Cloud-native Business Automation&lt;/p&gt;   
&lt;h3&gt;Event Abstract&lt;/h3&gt;   
&lt;p&gt;Kogito is a new platform and framework capabilities based on Drools, jBPM and OptaPlanner, designed to bring our traditional, battle-tested business automation engines to the cloud.&lt;/p&gt;   
&lt;p&gt;We have rethought the architecture of our platform to enable Java and JVM developers to realize distributed business automation applications with ease.&lt;/p&gt;   
&lt;p&gt;Leveraging modern application development frameworks, such as Quarkus, we can integrate seamlessly into a large range of capabilities. In particular, Quarkus has shown how it is possible to push the boundaries of traditional Java frameworks to make them cloud-native, through the power of GraalVM’s native compilation.&lt;/p&gt;   
&lt;p&gt;After a quick introduction to Kogito we will show with practical examples how to build cloud-native event-driven business applications, to the point where applications can be even deployed in a serverless environment, through Knative. We will also show what challenges a distributed environment poses, and how we can deal with them effectively thanks to Kogito.&lt;/p&gt;   
&lt;h3&gt;Speaker bios&lt;/h3&gt;   
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mariofusco&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Mario Fusco&lt;/a&gt; is a principal software engineer at Red Hat working as Drools project lead. He has a huge experience as Java developer having been involved in (and often leading) many enterprise level projects in several industries ranging from media companies to the financial sector. Among his interests there are also functional programming and Domain Specific Languages. By leveraging these 2 passions he created the open source library lambdaj with the purposes of providing an internal Java DSL for manipulating collections and allowing a bit of functional programming in Java. He is also a Java Champion and the co-author of “Modern Java in Action” published by Manning.&lt;/p&gt;   
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/matteomortari?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_contact_details%3Btm6JdlNqR4m1K%2FbLHcMvUA%3D%3D&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Matteo Mortari&lt;/a&gt; is a Senior Software Engineer at Red Hat, where he contributes in Drools development and support for the DMN standard. Matteo graduated from Engineering with focus on enterprise systems with a thesis involving rule engines which sparked his interests and influenced his professional career since. He believes there is a whole new range of unexplored applications for Expert Systems (AI) within the Corporate business; additionally, he believes defining the Business Rules on the BRMS system not only enables knowledge inference from raw data but, most importantly, helps to shorten the distance between experts and analysts, between developers and end-users, business stakeholders.&lt;/p&gt;   
&lt;hr class=&quot;wp-block-separator&quot;&gt;   
&lt;p&gt;You can join the event by following the instructions &lt;a href=&quot;https://dmcommunity.org/decisioncamp/monthly-online-sessions/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>IBM SkillsBuild Reignite 2020</title>
      <link>https://matteomortari.com/talks/2020/ibm-skillsbuild-reignite.html</link>
      <pubDate>Wed, 9 Dec 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">talks/2020/ibm-skillsbuild-reignite.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_modellare_un_requisito_eseguibile_automazione_dellintelligenza_artificiale_nei_processi_di_business_e_decisionali_attraverso_standard_aperti&quot;&gt;Modellare un requisito eseguibile: automazione dell’intelligenza artificiale, nei processi di business e decisionali, attraverso standard aperti&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Al cuore di ogni iniziativa di Digital Transformation c’è un aggiornamento dei processi aziendali, che vengono profondamente trasformati per dare vita a nuove forme di interazione con clienti, fornitori e dipendenti. Digitalizzare i processi in ottica cloud-native porta alla semplificazione e disintermediazione, ma non per questo bisogna rinunciare al controllo e alla visibilità grazie a strumenti in grado di gestire i processi e, al contempo, offrire al business gli opportuni livelli di governo e automazione. Inoltre sono da tempo sono disponibili strumenti di intelligenza artificiale che non sono ancora sfruttati appieno nell’ambito dell’automazione. In questa presentazione vedremo come standard aperti quali DMN, BPMN2 e altri standard permettono l’effettiva automazione dei processi di business, le rispettive logiche decisionali e l’integrazione con ulteriori tecniche di intelligenza artificiale quali Machine Learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://ibm.biz/skillsbuildreignite&quot; class=&quot;bare&quot;&gt;http://ibm.biz/skillsbuildreignite&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_speakers_bio&quot;&gt;Speakers Bio&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matteo Mortari is a Software Engineer at Red Hat, where he contributes in Drools development and support for the DMN standard. Matteo graduated from Engineering with focus on enterprise systems with a thesis involving rule engines which sparked his interests and influenced his professional career since. He believes there is a whole new range of unexplored applications for Expert Systems (AI) within the Corporate business; additionally, he believes defining the Business Rules on the BRMS system not only enables knowledge inference from raw data but, most importantly, helps to shorten the distance between experts and analysts, between developers and end-users, business stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Daniele Zonca is the architect of Red Hat Decision Manager and TrustyAI initiative where he contributes to open source projects Drools and Kogito focusing in particular on predictive model runtime support (PMML), ML explainability, runtime tracing and decision monitoring. Before that he led the Big Data development team in one of the major European banks designing and implementing analytical engines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>IIBA eXplainable Predictive Decisioning</title>
      <link>https://matteomortari.com/talks/2020/iiba-explainable-predictive-decisioning.html</link>
      <pubDate>Tue, 1 Dec 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">talks/2020/iiba-explainable-predictive-decisioning.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_is_this_customer_high_risk_how_explainable_predictive_decisioning_can_help_us_trust_our_ai&quot;&gt;Why Is This Customer &apos;High Risk&apos;: How eXplainable Predictive Decisioning Can Help Us Trust Our AI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The increased demand for transparent, explainable decision making, that is accurate, consistent and effective, has never been greater. Legislations like GDPR are just a result of increasing concerns about privacy, safety and transparency in general. While AI/ML solutions are great at making sense of high volumes of data, the reasoning process is usually quite opaque, sometimes leaving us baffled as to why it made a particular recommendation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will learn about the latest research in the field of eXplainable AI (XAI), an approach that combines AI/ML and traditional business rules to better understand the factors that contribute to an automated decision. Presenters will introduce you to the latest standards for representing decision logic, and will demonstrate an XAI solution built from open source components that will show how we can finally answer questions about why an automated decision was made.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_speakers_bio&quot;&gt;Speakers Bio&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/matteomortari&quot;&gt;Matteo Mortari&lt;/a&gt; is a Senior Software Engineer at Red Hat, where he contributes in Drools development and support for the DMN standard. Matteo graduated from Engineering with focus on enterprise systems with a thesis involving rule engines which sparked his interests and influenced his professional career since. He believes there is a whole new range of unexplored applications for Expert Systems (AI) within the Corporate business; additionally, he believes defining the Business Rules on the BRMS system not only enables knowledge inference from raw data but, most importantly, helps to shorten the distance between experts and analysts, between developers and end-users, business stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Daniele Zonca is the architect of Red Hat Decision Manager and TrustyAI initiative where he contributes to open source projects Drools and Kogito focusing in particular on predictive model runtime support (PMML), ML explainability, runtime tracing and decision monitoring. Before that he led the Big Data development team in one of the major European banks designing and implementing analytical engines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Interview Strumenta Process Automation</title>
      <link>https://matteomortari.com/talks/2020/interview-strumenta-process-automation.html</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">talks/2020/interview-strumenta-process-automation.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_interview_with_matteo_mortari_on_process_automation&quot;&gt;Interview with Matteo Mortari on process automation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matteo Mortari is a Senior Software Engineer at Red Hat, where he contributes in Drools development and support for the DMN standard. In this interview, we try to find out more about his work in the process automation field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://tomassetti.me/interview-with-matteo-mortari-on-process-automation&quot; class=&quot;bare&quot;&gt;https://tomassetti.me/interview-with-matteo-mortari-on-process-automation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>DMN Validation updates: Kogito and migration to Executable Model</title>
      <link>https://matteomortari.com/blog/2020/dmn-validation-updates-kogito-and-migration-to-executable-model.html</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/dmn-validation-updates-kogito-and-migration-to-executable-model.html</guid>
      	<description>
	&lt;p&gt;In this article, we will describe some of the recent updates to the DMN Validation module (&lt;code&gt;kie-dmn-validation&lt;/code&gt;) and how the migration to make use of the Executable Model enabled a number of use-cases, such as porting the functionality on the Kogito platform.&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row py-3&quot;&gt;
&lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/uAz6pVg0RFQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;  
&lt;h2&gt;Introduction&lt;/h2&gt;   
&lt;p&gt;The Drools DMN Engine provides static and semantic validation of DMN models:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;validation of DMN against specification XSDs&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;static validation of DMN file
  &lt;ul&gt;
   &lt;li&gt;e.g.: pre-compilation phase semantic validations (duplicate names, missing decision logic, etc.)&lt;/li&gt;
   &lt;li&gt;fun-fact: static validation is performed with… Drools rules!&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;compilation phase checks&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;decision tables static analysis
  &lt;ul&gt;
   &lt;li&gt;implements &lt;a href=&quot;https://www.amazon.com/Dmn-Method-Style-2nd-Pracitioners/dp/0982368178&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Method &amp;amp; Style checks&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;semantic checks&lt;/li&gt;
   &lt;li&gt;Hit Policy recommender&lt;/li&gt;
   &lt;li&gt;Experimental features such as the MC/DC test case generator&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;The pre-compilation phase, where semantic validations are performed statically by introspecting deserialised DMN models, make use of Drools rules to ensure the conformance requirements from the &lt;a href=&quot;https://www.omg.org/spec/DMN&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DMN specification&lt;/a&gt; itself are respected in the DMN model provided by the user.&lt;/p&gt;   
&lt;h2&gt;Migrating the DMN Validation to make use of the Executable Model&lt;/h2&gt;   
&lt;p&gt;The migration required to fix some small corner cases in the executable model itself: I am extremely thankful to my colleagues Mario and especially Luca who supported me extensively in this migration, making it possible!&lt;br&gt;As any &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot; target=&quot;_blank&quot;&gt;dogfooding&lt;/a&gt; program (the DMN validation module makes use of DRL rules to describe DMN specification semantics), this has been helpful &lt;em&gt;also&lt;/em&gt; to highlight and overcome limitations early-on in the executable model itself when compared to the classic DRL mode of evaluation, to everyone&apos;s benefit! :)&lt;/p&gt;   
&lt;p&gt;This migration also offers right off the bat several additional advantages:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;now &lt;code&gt;kie-dmn-validation&lt;/code&gt;&amp;nbsp;uses the&amp;nbsp;&lt;em&gt;same default&lt;/em&gt;&amp;nbsp;as per any kjar project Maven-built for Drools rules&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;several performance improvements;&lt;br&gt;for a basic example,&amp;nbsp;executing&amp;nbsp;the full &lt;code&gt;kie-dmn-validation&lt;/code&gt;&amp;nbsp;module tests now is cut in half (was 40s, now ~18s)&lt;br&gt;&lt;/li&gt;
 &lt;li&gt;it is an enabler: the &lt;code&gt;kie-dmn-validation&lt;/code&gt;&amp;nbsp;has been enabled also on Kogito, during code generation phase&lt;/li&gt;
&lt;/ul&gt;   
&lt;h2&gt;DMN Validation on Kogito&lt;/h2&gt;   
&lt;p&gt;By default now Kogito performs validation of DMN against specification XSDs and static validation of DMN file (pre-compilation phase semantic validations). Decision Table analysis on Kogito platform will be enabled in a future iteration.&lt;/p&gt;   
&lt;p&gt;As a basic example: if you inadvertently violated the DMN specification by authoring a DMN model with two identical names in the nodes, you will be presented with a relevant DMN Validation message:&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://blog.kie.org/wp-content/uploads/2020/09/Screenshot-2020-09-21-at-14.34.32-1024x576.png&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;You can always opt-out of DMN Validation by disabling it entirely by configuring with application.properties:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;kogito.decisions.validation=DISABLED&lt;/pre&gt;   
&lt;p&gt;or ignoring any error during the build by configuring instead:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;kogito.decisions.validation=IGNORE&lt;/pre&gt;   
&lt;h2&gt;Next Steps&lt;/h2&gt;   
&lt;p&gt;As we expand the DMN Validation features (and the Kogito platform itself) please try it out and let us know your feedback!&lt;/p&gt;   
&lt;p&gt;We believe the DMN Validation can better support you authoring DMN models more effectively.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>About DMN endpoints on Kogito</title>
      <link>https://matteomortari.com/blog/2020/kogito-2840-about-dmn-endpoints-on-kogito.html</link>
      <pubDate>Tue, 4 Aug 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/kogito-2840-about-dmn-endpoints-on-kogito.html</guid>
      	<description>
	&lt;p&gt;This post summarises the current design of REST endpoints which are automatically generated and made available, when using DMN model assets in a Kogito application. This work was finalised as part of &lt;a href=&quot;https://issues.redhat.com/browse/KOGITO-2840&quot;&gt;KOGITO-2840&lt;/a&gt;.&lt;/p&gt;   
&lt;h2&gt;Introduction&lt;/h2&gt;   
&lt;p&gt;For each DMN model in a Kogito application, a collection of REST endpoints is automatically code generated based on the content of the model.&lt;/p&gt;   
&lt;p&gt;For each DMN model there will be:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;one REST “business-domain” endpoint to support the evaluation of the whole model&lt;/li&gt;
 &lt;li&gt;one REST “business-domain” endpoint to support the evaluation for each Decision Service(s) in the model&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;and also analogous endpoints returning &lt;em&gt;classic&lt;/em&gt; &lt;code&gt;DMNResult&lt;/code&gt; comprising business domain context and helper messages and helper decision “pointers”:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;one REST “dmnresult” endpoint to support the evaluation of the whole model&lt;/li&gt;
 &lt;li&gt;one REST “dmnresult” endpoint to support the evaluation for each Decision Service(s) in the model&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;and finally:&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;one REST &lt;code&gt;GET&lt;/code&gt; to return the DMN xml &lt;em&gt;without&lt;/em&gt; decision-logic&lt;br&gt;This can be helpful for model introspection.&lt;br&gt;We are planning to eventually parametrise this endpoint with additional options for TrustyAI.&lt;/li&gt;
&lt;/ul&gt;   
&lt;h2&gt;URL naming&lt;/h2&gt;   
&lt;p&gt;The naming of the endpoints is currently structured with the following convention:&lt;/p&gt;   
&lt;p&gt;POST&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;{modelname}&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;{modelname}&lt;strong&gt;/&lt;/strong&gt;{decisionServiceName}&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;{modelname}&lt;strong&gt;/dmnresult&lt;/strong&gt;&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;{modelname}&lt;strong&gt;/&lt;/strong&gt;{decisionServiceName}&lt;strong&gt;/dmnresult&lt;/strong&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;   
&lt;p&gt;GET&lt;/p&gt;   
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;{modelname}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;   
&lt;h2&gt;Choosing between “business-domain” and dmnresult variant of the REST endpoints&lt;/h2&gt;   
&lt;p&gt;If a client application is only concerned with a positive evaluation outcome, is not interested in parsing Info/Warn message(s) and only needs to get an http 5xx in case of Errors, might prefer to opt for using the “business-domain” variant. Especially the feature of singleton coercion of Decision Service result, mimicking the DMN modeling behaviour, might be helpful for single page application-like clients.&lt;/p&gt;   
&lt;p&gt;If a client needs to parse also Info/Warn/Error messages in all the cases, it is best to prefer the dmnresult variant.&lt;/p&gt;   
&lt;h2&gt;API details of the “business-domain” endpoints&lt;/h2&gt;   
&lt;p&gt;The whole model endpoint needs as the input payload, all the Input Data of the model.&lt;/p&gt;   
&lt;p&gt;Once invoked, the output payload will be the resulting DMN context of the whole model evaluation, that is the one composed of the actual resulting Decision values, the original input values, and all other parametric DRG requirements in serialized form (e.g.: a BKM will be available in string serialized form in its signature).&lt;/p&gt;   
&lt;p&gt;The decision service endpoint needs as the input payload, all the requirements of the Decision Service.&lt;/p&gt;   
&lt;p&gt;Once invoked, the output payload will be the resulting DMN context of the Decision Service evaluation, that is the one composed of the actual resulting Decision values, the original input requirements, and all other parametric DRG requirements in serialized form (e.g.: a BKM will be available in string serialized form in its signature).&lt;/p&gt;   
&lt;p&gt;In the case the Decision Service is composed of a &lt;em&gt;single output decision&lt;/em&gt;, the output payload will be the resulting value of that specific Decision; this is to provide an equivalent at API level of a specification feature, when invoking the Decision Service in the model itself. This feature can be used for example to interact very easily from single page web applications, with a DMN Decision Service.&lt;/p&gt;   
&lt;p&gt;For all these endpoints, in case of a DMN evaluation Error, a full DMNResult payload is returned along with a http 5xx error. In case of a DMN Info/Warn message, these will be returned along with the “business-domain” return rest payload, in the &lt;code&gt;X-Kogito-decision-messages&lt;/code&gt; extended http header, more as an helper than to be used for client-side business logic; this is based on the assumption that, in case when more refined client-side business logic is required, the client can actually use the “dmnresult” variant of the endpoints.&lt;/p&gt;   
&lt;h2&gt;Examples&lt;/h2&gt;   
&lt;p&gt;In the following sections, some basic examples will be presented.&lt;/p&gt;   
&lt;h3&gt;Endpoint: whole model&amp;nbsp;&lt;/h3&gt;   
&lt;p&gt;Given:&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh4.googleusercontent.com/yF069bevleZaXtS_PwGKNaN-Scz1j_R9XB7rbdMJSXcFKW9wRjPuXGAcwcoo5wdAtxYE2fSIbuor1w1tsrNztppSSSjm1LdVeqxB3vCD378Ulhh53JQcdIk6N9TlVtWQQ_nlEXq-&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;We notice the name of the DMN model is &lt;code&gt;Traffic Violation&lt;/code&gt;:&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/97JmiRDDl3PkaZFwddgDZwqt57Q-p6Bo0r1erEUTBu-j6fZeLoVYUiQTdAuD-Uunaw71yRTnN2zOxpHUD2BS736lsYDyNDLJSaRBRPZp9WOMzaz-2Gdh0i4MpSbUEZ8Q5j5kDLIf&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;endpoint: &lt;code&gt;localhost:8080/Traffic Violation&lt;/code&gt;&lt;/p&gt;   
&lt;p&gt;input payload:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Driver&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Points&quot;: 2
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Violation&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Type&quot;: &quot;speed&quot;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Actual Speed&quot;: 120,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Speed Limit&quot;: 100
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;   
&lt;p&gt;output:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;{
  &quot;Violation&quot;: {
    &quot;Type&quot;: &quot;speed&quot;,
    &quot;Speed Limit&quot;: 100,
    &quot;Actual Speed&quot;: 120
  },
  &quot;Driver&quot;: {
    &quot;Points&quot;: 2
  },
  &quot;Fine&quot;: {
    &quot;Points&quot;: 3,
    &quot;Amount&quot;: 500
  },
  &quot;Should the driver be suspended?&quot;: &quot;No&quot;
}&lt;/pre&gt;   
&lt;h3&gt;Endpoint: decision service with singleton output decision&lt;/h3&gt;   
&lt;p&gt;Given:&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/kOsYWVbk5wjjQkHuHbjgoyuEyZNMGhwY6jih6cDdV4wNxp9QBMNzGUYNRFajKurFJNUEAstYTYVuS2Ck5_rMvyYrjNeq-NDJLcF69pJ5XkmBVK8RJf5jmXv0nK2NYKGXkJeA3kcd&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;we notice the name of the decision service is &lt;code&gt;TrafficViolationDecisionService&lt;/code&gt;:&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh4.googleusercontent.com/OZ4uj7tKPunXaPvDELE8hzoN8wBreRws-8mDw4l88j80o2yadNGol4FYhuRYFhJTiLBcOClWf0w4isVwD8wJHaqVLudcy8pPi2Y2uOZ1gY1I7lsxqFlamuqxUv_w-G41CJnOKSkw&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;endpoint: &lt;code&gt;localhost:8080/Traffic Violation/TrafficViolationDecisionService&lt;/code&gt;&lt;/p&gt;   
&lt;p&gt;input payload:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Driver&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Points&quot;: 2
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Violation&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Type&quot;: &quot;speed&quot;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Actual Speed&quot;: 120,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Speed Limit&quot;: 100
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;   
&lt;p&gt;output:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;&quot;No&quot;&lt;/pre&gt;   
&lt;h3&gt;Endpoint: decision service with multiple output decision&lt;/h3&gt;   
&lt;p&gt;Now given instead:&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row&quot;&gt;
 &lt;figure class=&quot;figure&quot;&gt; 
  &lt;img src=&quot;https://lh5.googleusercontent.com/1nRZwDs77_9C3pw_zAEW3DDVq6ZTdJH9ENe9KnaOxPBp1AO0iqqfrY55dRI8do9g7JI1aUCyOdu_UJHfpMfj7svbuxfL4H9ggrf9VqKswmrsQrfODxZAJw9kgPyBKOz7_g9_fqKQ&quot; alt=&quot;&quot; class=&quot;figure-img img-fluid&quot;&gt; 
 &lt;/figure&gt;
&lt;/div&gt;   
&lt;p&gt;endpoint: &lt;code&gt;localhost:8080/Traffic Violation/TrafficViolationDecisionService&lt;/code&gt;&lt;/p&gt;   
&lt;p&gt;input payload:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Driver&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Points&quot;: 2
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Violation&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Type&quot;: &quot;speed&quot;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Actual Speed&quot;: 120,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Speed Limit&quot;: 100
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;   
&lt;p&gt;output:&lt;/p&gt;   
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Violation&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Type&quot;: &quot;speed&quot;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Speed Limit&quot;: 100,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Actual Speed&quot;: 120
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Driver&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Points&quot;: 2
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Fine&quot;: {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Points&quot;: 3,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Amount&quot;: 500
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;Should the driver be suspended?&quot;: &quot;No&quot;
}&lt;/pre&gt;   
&lt;h2&gt;Conclusions&lt;/h2&gt;   
&lt;p&gt;We have seen the current design of DMN REST endpoints automatically generated in a Kogito application and how can be used to support several use-cases.&lt;/p&gt;   
&lt;p&gt;We like to hear your feedback! Do you have some thoughts or question about this topic? Please make sure to let us know!&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Making Executable DMN Modeling More Business-Friendly</title>
      <link>https://matteomortari.com/blog/2020/making-executable-dmn-modeling-more-business-friendly.html</link>
      <pubDate>Thu, 9 Jul 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/making-executable-dmn-modeling-more-business-friendly.html</guid>
      	<description>
	&lt;p class=&quot;has-text-align-right&quot;&gt;presentation by&lt;br&gt;Bruce Silver, MethodAndStyle.com&lt;br&gt;and Matteo Mortari, Red Hat&lt;/p&gt;   
&lt;p&gt;At this year&apos;s&amp;nbsp;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://decisioncamp2020.home.blog/program/#BruceSilver&quot; target=&quot;_blank&quot;&gt;Decision Camp 2020&lt;/a&gt;, I had the opportunity to present with Bruce Silver a complete overview of the DMN Validation features, and some of the research areas we are working together on:&lt;/p&gt;   
&lt;div class=&quot;justify-content-center text-center row py-3&quot;&gt;
&lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;ratio ratio-16x9&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/eQRDc6fq2yw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;   
&lt;p&gt;I hope this can be an helpful summary&amp;nbsp;of what you should look at when considering Validation of a DMN model and decision tables, including some of the unique features that we offer there, together with all our partners like Trisotech too, and some of the experimental features we are researching to ease the work of the Business Analyst and decision modelers.&lt;/p&gt;   
&lt;p&gt;While DMN is sometimes used simply to create “decision requirements” handed off to developers, the standard was designed for non-programmers to create executable decision models themselves. Although decision model design is nominally business-friendly, business users still struggle to create DMN models that are correct and complete. This can be partially explained by the lack of disciplined approach and application of engineering principles that come naturally to technical users, presenting an opportunity for vendors’ tools to assist them.&lt;/p&gt;   
&lt;p&gt;Decision tables are DMN’s most business-friendly feature, but business users have problems ensuring they are complete and consistent and difficulty applying the correct hit policy. Decision Table Analysis built into the DMN tool should be able to detect flaws like gaps in the rules, unintended overlaps, subsumption, and incorrect hit policy. We have developed such an algorithm and are incorporating it into multiple DMN tools.&lt;/p&gt;   
&lt;p&gt;Beyond completeness and consistency, the decision table logic must be correct, the output always matching the expected value. That is what test cases are for, but business users do not know how to use them or create test cases that fully test the logic. This again presents an opportunity for tool-based assistance.&lt;/p&gt;   
&lt;p&gt;Automated test case generation is not an easy problem. A decision table with N inputs, each of which has m possible values, requires m**N test cases for complete coverage. From the world of automated software testing, a method called Modified Condition/Decision Coverage (MC/DC) has been shown to provide excellent coverage with far fewer test cases. We have developed an algorithm for applying MC/DC to test case generation for DMN decision tables.&lt;/p&gt;   
&lt;p&gt;Keywords: DMN, Decision Tables, Hit Policy, Test Cases&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Functional Programming in DMN: it FEELs like recursing my university studies again</title>
      <link>https://matteomortari.com/blog/2020/functional-programming-in-dmn-it-feels-like-recursing-my-university-studies-again.html</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/functional-programming-in-dmn-it-feels-like-recursing-my-university-studies-again.html</guid>
      	<description>
	In this post, I would like to share interesting insights about recursion support in DMN and highlights how specific properties of the FEEL language enable functional programming constructs to be modeled in DMN.&lt;br /&gt;&lt;br /&gt;We are going to start from a basic example, in order to demonstrate how the Business Friendliness nature of the FEEL language and DMN constructs, allow us to tame an otherwise commonly unpleasant problem: the definition of a recursive function. Then, we are going to adventure in FP land, and in the cradle of FEEL/DMN we will admire one of the best creatures of functional construct: the Y Combinator. At the end, we will find ourselves be asked the famous question again:&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-Ovsb3rRsdLY/XpV4DzewakI/AAAAAAAAcsA/meKW5eMVQuw4lS3-PsfpI-LKNBzBzRxiQCNcBGAsYHQ/s1600/image4.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;609&quot; data-original-width=&quot;1125&quot; height=&quot;173&quot; src=&quot;https://1.bp.blogspot.com/-Ovsb3rRsdLY/XpV4DzewakI/AAAAAAAAcsA/meKW5eMVQuw4lS3-PsfpI-LKNBzBzRxiQCNcBGAsYHQ/s320/image4.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Using the pure engineering approach, let’s dig into the matter right away!&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h2&gt;Basic recursion example&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Drools DMN open source engine&lt;/a&gt; allows recursion support in DMN Business Knowledge Model nodes. This enables modeling of recursive functions very easily and &lt;b&gt;it is our recommended approach&lt;/b&gt; when modeling recursive functions in DMN: allow the function to call itself by its name.&lt;br /&gt;&lt;br /&gt;Let’s take a look at a simple example: modeling the &lt;a href=&quot;https://en.wikipedia.org/wiki/Factorial&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;factorial&lt;/a&gt; function in DMN.&lt;br /&gt;&lt;br /&gt;We can use the &lt;a href=&quot;https://porcelli.me/announcement/tooling/online/bpmn/dmn/2020/03/12/online-new-editors.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kogito DMN editor&lt;/a&gt; and define the DRD as follows:&lt;a href=&quot;https://1.bp.blogspot.com/-DtC2-_Svfkw/XpV5G5BF9KI/AAAAAAAAcsI/81lgASeZ3a4OYnYMyVHF0ewCxVH-HeGfwCNcBGAsYHQ/s1600/image3.png&quot; style=&quot;margin-left: 1em; margin-right: 1em; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;868&quot; data-original-width=&quot;1201&quot; height=&quot;462&quot; src=&quot;https://1.bp.blogspot.com/-DtC2-_Svfkw/XpV5G5BF9KI/AAAAAAAAcsI/81lgASeZ3a4OYnYMyVHF0ewCxVH-HeGfwCNcBGAsYHQ/s640/image3.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;With the “fac” Business Knowledge Model (in short, BKM) node defining the actual Factorial function recursively as:&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-7Ot9dJRr7mw/XpV5lx6wYLI/AAAAAAAAcsQ/tLPW-S0ZtiIRp5Jvqd3YQykPIHiTIuZEwCNcBGAsYHQ/s1600/image9.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;326&quot; data-original-width=&quot;532&quot; height=&quot;392&quot; src=&quot;https://1.bp.blogspot.com/-7Ot9dJRr7mw/XpV5lx6wYLI/AAAAAAAAcsQ/tLPW-S0ZtiIRp5Jvqd3YQykPIHiTIuZEwCNcBGAsYHQ/s640/image9.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;As we can notice, the function invokes itself as any other normal &lt;a href=&quot;https://www.google.com/search?q=recursion&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;recursive&lt;/a&gt; function, the only difference here is that it is defined as part of a DMN Boxed Expression; the name of this function is defined by the BKM node with the boxed expression construct “fac”, then the body of the function make reference and invokes itself as part of the FEEL expression “fac(n-1)”.&lt;br /&gt;&lt;br /&gt;We can use this BKM to calculate the actual result as passed by the Input Data node, as part of the “compute factorial” Decision, as:&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-RcPiU8L7Qug/XpV5sA1ZRVI/AAAAAAAAcsU/E08ZZwqCmyMeMaPVB3siTggs-1bYrYbbACNcBGAsYHQ/s1600/image2.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;330&quot; data-original-width=&quot;564&quot; height=&quot;374&quot; src=&quot;https://1.bp.blogspot.com/-RcPiU8L7Qug/XpV5sA1ZRVI/AAAAAAAAcsU/E08ZZwqCmyMeMaPVB3siTggs-1bYrYbbACNcBGAsYHQ/s640/image2.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This works well and gives the expected results:&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&amp;nbsp; &amp;nbsp; My number: 3&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&amp;nbsp; &amp;nbsp; fac: function fac( n )&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&amp;nbsp; &amp;nbsp; compute factorial: 6&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;About currying&lt;/span&gt;&lt;/h2&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;DMN and more importantly the FEEL language allow to define and invoke &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;curried&lt;/a&gt; functions.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;This allows us to write in FEEL something like:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;{ f : function(a) function(b) a + b, r : f(1)(2) }&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;where:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;we defined a feel:context with 2 entries&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;the first entry is named “f” and defines a curried function: a function of one parameter “a” that, once invoked, will return a function of one parameter “b” that, once invoked, will return the sum of a+b&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;the latter entry named “r” which invokes the curried function with a=1 and b=2.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Albeit this is potentially a weird looking FEEL expression, we are not surprised once executed r = 3.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;We can do equivalently by using DMN Boxed Expression constructs:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-te_EmOZpMpA/XpV6_aZ6XRI/AAAAAAAAcsk/WPRoN2lB6-8dL1fEADyEuwsAGzOumku9gCNcBGAsYHQ/s1600/image7.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;629&quot; data-original-width=&quot;918&quot; height=&quot;438&quot; src=&quot;https://1.bp.blogspot.com/-te_EmOZpMpA/XpV6_aZ6XRI/AAAAAAAAcsk/WPRoN2lB6-8dL1fEADyEuwsAGzOumku9gCNcBGAsYHQ/s640/image7.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;This is a BKM node named “curried sum”; it is a DMN Invocable of one parameter “a” that, once invoked, will return a function of one parameter “b” that, once invoked, returns the sum of a+b.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Again, we are not surprised once executed&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;curried sum(1)(2) = 3&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Y Combinator: recursion without recursion support&lt;/span&gt;&lt;/h2&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Let’s go back for a moment to the earlier recursive function example; we overlooked the fact if it’s actually formally possible for a function to call itself by its name in DMN: the DMN specification does not explicitly support this, but it doesn’t explicitly forbid it either. In other terms, recursion support is not formally specified.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;What-if we still needed to define a recursive function, but we found the road was still under construction, missing that formal recursion support? We can use a functional device, called the “&lt;a href=&quot;https://youtu.be/9T8A89jgeTI&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Y Combinator&lt;/a&gt;” which allows anonymous functions to achieve recursion without relying on self-invocation by its own (unexisting) name.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Let’s look at an example; we can define the Y Combinator in DMN as follows:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-w8ACy3InpEY/XpV7-mjlEKI/AAAAAAAAcs0/J52_N9IuXSMRwWfe9tnQVCUcIP3YCavJQCNcBGAsYHQ/s1600/image1.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;629&quot; data-original-width=&quot;918&quot; height=&quot;438&quot; src=&quot;https://1.bp.blogspot.com/-w8ACy3InpEY/XpV7-mjlEKI/AAAAAAAAcs0/J52_N9IuXSMRwWfe9tnQVCUcIP3YCavJQCNcBGAsYHQ/s640/image1.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;It is potentially a weird looking function :) let’s assume this was defined for us, and we can just make use of it.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;We can use it to re-define the factorial calculation as:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-wnZ5nkrZNos/XpV7PdWwmFI/AAAAAAAAcsw/nGSdAkHRTJ4RIzT3z1Af3T2GtqJzkxcaQCPcBGAYYCw/s1600/image5.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;629&quot; data-original-width=&quot;918&quot; height=&quot;438&quot; src=&quot;https://1.bp.blogspot.com/-wnZ5nkrZNos/XpV7PdWwmFI/AAAAAAAAcsw/nGSdAkHRTJ4RIzT3z1Af3T2GtqJzkxcaQCPcBGAYYCw/s640/image5.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;We can notice the body of the “fac” function definition is overall the same; however, this is not any longer a function invoking itself by its name: there is no trace of a call to “fac(...)” in the body of the function!&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Naturally, there is still a form of recursion happening, but this time is leveraging the name of the parameters which are in scope of the closure: “f”.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;The result works as expected:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;fac(3) = 6&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;We can take a look at another example, defining the Fibonacci sequence using the Y Combinator in DMN:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-9ZLCCXNYF1A/XpV8JcTgGFI/AAAAAAAAcs4/1ZkteeJJ2sUYWfAeev6YbtkkgznE81T4ACNcBGAsYHQ/s1600/image8.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;629&quot; data-original-width=&quot;918&quot; height=&quot;438&quot; src=&quot;https://1.bp.blogspot.com/-9ZLCCXNYF1A/XpV8JcTgGFI/AAAAAAAAcs4/1ZkteeJJ2sUYWfAeev6YbtkkgznE81T4ACNcBGAsYHQ/s640/image8.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;We notice again there is no call to “fib(...)” in the function body, yet recursion for the calculation of the Fibonacci sequence is performed thanks to the use of the Y Combinator.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Once again, the result works as expected:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;fib(5) = [1, 1, 2, 3, 5]&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;For extra fun, we can re-define the Y Combinator using where possible the DMN Boxed Expression forms. This is an interesting exercise to see how closures are applied in their boxed variant. The Y Combinator definition could be refactored as:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-Fs6H16uviFE/XpV83HIwjuI/AAAAAAAActE/amoqRBw8IlcHnD-zAqTSK_Sp5yklUe0VQCNcBGAsYHQ/s1600/image6.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;895&quot; data-original-width=&quot;978&quot; height=&quot;584&quot; src=&quot;https://1.bp.blogspot.com/-Fs6H16uviFE/XpV83HIwjuI/AAAAAAAActE/amoqRBw8IlcHnD-zAqTSK_Sp5yklUe0VQCNcBGAsYHQ/s640/image6.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;and that would yield again the same expected and correct results.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;For (extra (extra fun)), we can re-define once more the Y Combinator in a single FEEL expression to calculate for instance the factorial of 4:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;{ Y: function(f) (function(x) x(x))(function(y) f(function(x) y(y)(x))), fac: Y(function(f) function(n) if n &amp;gt; 1 then n * f(n-1) else 1), fac4: fac(4) }.fac4&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;The result is unsurprisingly: 24.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;In this post, we have seen a basic example of recursion in DMN, and how to leverage recursion support in the engine is very simple to use; &lt;b&gt;engine recursion support is the approach we recommend&lt;/b&gt; to achieve recursion DMN: give the function a name, and in the body of the function make use of that name to invoke itself. In the example, we have named the function “fac”, then we invoked “fac(...)” in the body of the function itself.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;This approach is very practical, easy to model in DMN and works just fine.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;We have also seen how DMN and FEEL do indeed support curried function definition and invocation. FEEL is (also) a functional language; all these properties allow us to define in DMN and use the Y Combinator, a functional device to achieve recursion without recursion support!&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;I personally found these exercises very interesting to apply functional programming concepts in DMN, while at the same time making sure the engine worked as expected. I would like to say special thanks to my colleagues Edoardo Vacchi and Luca Molteni for their support while discussing the Y Combinator and Currying functions.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Interested in DMN?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;If you didn’t know about DMN before, you found this post interesting but looking for a gentle introduction to the DMN standard, we have just the right crash course on DMN, freely available for you at:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;a href=&quot;http://learn-dmn-in-15-minutes.com/&quot;&gt;http://learn-dmn-in-15-minutes.com&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;You can find additional information on the Drools website &lt;/span&gt;&lt;a href=&quot;https://drools.org/learn/dmn.html&quot; style=&quot;font-family: inherit;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;. Don’t hesitate to contact us for more information.&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;

	</description>
    </item>
    <item>
      <title>Recent Drools DMN open source engine performance improvements</title>
      <link>https://matteomortari.com/blog/2019/recent-drools-dmn-open-source-engine-performance-improvements.html</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2019/recent-drools-dmn-open-source-engine-performance-improvements.html</guid>
      	<description>
	&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;We are always looking to improve the performance of the &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Drools DMN open source engine&lt;/a&gt;. We have recently reviewed a DMN use-case where the actual input population of Input Data nodes varied to some degree; this highlighted a suboptimal behavior of the engine, which we improved in recent releases. I would like to share our findings!&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;h2 style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Benchmark development&lt;/span&gt;&lt;/h2&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;As we started running a supporting benchmark for this use-case, especially when investigating the scenario of large DMN models with sparse-populated input data nodes, we noticed some strange results: the flamegraph data highlighted a substantial performance hit when logging messages, consuming very significant time in comparison to the application logic itself.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-l-LzjpebOKo/XVGE-M6ip5I/AAAAAAAAavo/gAFOLIV2PTE8FfdW41g0SU2eRxmfRR5EACLcBGAs/s1600/flamegraph.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;742&quot; data-original-width=&quot;1200&quot; height=&quot;393&quot; src=&quot;https://1.bp.blogspot.com/-l-LzjpebOKo/XVGE-M6ip5I/AAAAAAAAavo/gAFOLIV2PTE8FfdW41g0SU2eRxmfRR5EACLcBGAs/s640/flamegraph.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;This flamegraph highlight specifically that a large portion of time is consumed by stacktrace synthesis, artificially induced by the logging framework. The correction, in this case, was to tune the logging configuration to avoid this problem; specifically, we disabled a feature of the logging framework which is very convenient during debugging activities, enabling to quickly locate the original calling class and methods: unfortunately this feature come at the expense of synthesizing stacktraces, which originally contaminated the benchmark results. Lesson learned here: always check first if non-functional requirements are actually masking the real issue!&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;This was a necessary and propaedeutic step, before proceeding to investigate the use-case in more details.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Improving performance&lt;/span&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Moving on and focusing now on DMN optimizations, we specifically developed a benchmark to be general enough, but also highlighting the use-case which was presented to us. This benchmark consists of a DMN model with many (500) decision nodes to be evaluated. Another parameter controls sparseness of input data nodes valorization for evaluation; ranging from a value of 1 where all inputs are populated, to 2 where only one out of two inputs is actually populated, etc.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;This specific benchmark proved to be a very instrumental tool to highlight some potential improvements.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Setting the comparison baseline to Drools release 7.23.0.Final, the first optimization implemented with &lt;a href=&quot;https://issues.jboss.org/browse/DROOLS-4204&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DROOLS-4204&lt;/a&gt; focused on improving context handling while evaluating FEEL expressions and demonstrated to offer a ~3x improvement, while further optimization implemented with &lt;a href=&quot;https://issues.jboss.org/browse/DROOLS-4266&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DROOLS-4266&lt;/a&gt; focusing on specific case for decision table input clauses demonstrated an additional ~2x improvement on top of DROOLS-4204.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;We also collected these measurements in the following graphs.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-musedBeWBLs/XVGFwczABFI/AAAAAAAAavw/DAGvBeLMxGkK05yeT9VRG9jvvEgGv5WFQCLcBGAs/s1600/chart%2B%25283%2529.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;371&quot; data-original-width=&quot;600&quot; height=&quot;394&quot; src=&quot;https://1.bp.blogspot.com/-musedBeWBLs/XVGFwczABFI/AAAAAAAAavw/DAGvBeLMxGkK05yeT9VRG9jvvEgGv5WFQCLcBGAs/s640/chart%2B%25283%2529.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;This graph highlights the compounding improvements in the case of sparseness factor equal to 1, where all inputs are populated; this was a very important result, as in fact it did represent the &lt;b&gt;main&lt;/b&gt;, “happy path” scenario in the original use-case.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;In other words, we achieved a ~6x improvement in comparison to running the same use-case on&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;7.23.0.Final. The lesson I learned here is to always strive for these kind of &lt;i&gt;compounding&lt;/i&gt; improvements when possible, as they really build on top of each other, for greater results!&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;For completeness, we repeated the analysis with sparseness factor equals to 2 (1 every 2 inputs is actually populate) and 50 (1 every 50 inputs is actually populated) with the following measurements:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-maGVgo4ujlM/XVGGQTUK__I/AAAAAAAAav8/1WJnm4nDKrM0hCyU4kVatRSJJ-h9rdC9gCLcBGAs/s1600/chart%2B%25282%2529.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;371&quot; data-original-width=&quot;600&quot; height=&quot;394&quot; src=&quot;https://1.bp.blogspot.com/-maGVgo4ujlM/XVGGQTUK__I/AAAAAAAAav8/1WJnm4nDKrM0hCyU4kVatRSJJ-h9rdC9gCLcBGAs/s640/chart%2B%25282%2529.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Results show that the optimizations were also significant for sparseness factor equal to 2, but not as relevant improvements as this factor grows -- which is expected, as the impact of the decision nodes evaluations on the overall logic of execution become now less relevant.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;For completeness, analysis was also performed with another, already existing benchmark for single decision table consisting of many rules rows:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;div style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-vihCDOZEsc0/XVGGVhbVkNI/AAAAAAAAawA/yxQa64vTOhI-O9Zgi0g9t5MPwS0lZ4lCwCLcBGAs/s1600/chart%2B%25284%2529.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;371&quot; data-original-width=&quot;600&quot; height=&quot;394&quot; src=&quot;https://1.bp.blogspot.com/-vihCDOZEsc0/XVGGVhbVkNI/AAAAAAAAawA/yxQa64vTOhI-O9Zgi0g9t5MPwS0lZ4lCwCLcBGAs/s640/chart%2B%25284%2529.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Results show that these code changes considered as a whole, still offered a relevant improvement; although clearly not of the same &lt;i&gt;magnitude&lt;/i&gt; as for the original use-case. This was another important check to ensure that these improvements were not overfitting on the specific use-case.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;h2&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Conclusions&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;Considering Drools release 7.23.0.Final as the baseline, and a reference benchmark consisting of a DMN model with many decision nodes to be evaluated, we implemented several optimizations that once combined demonstrated to offer a total of ~6x speed-up on that specific use case!&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;I hope this was an interesting post to highlight some of the dimensions were to look into to achieve better performances; let us know you thoughts and feedback.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;You can already benefit today from these Kie &lt;a href=&quot;https://drools.org/learn/dmn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DMN open source engine&lt;/a&gt; improvements in the most recent releases of Drools!&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;br /&gt;&lt;/div&gt;

	</description>
    </item>

  </channel> 
</rss>
